import os

from osgeo import gdal
from osgeo import ogr

from invest_natcap.coastal_vulnerability import coastal_vulnerability_core as cvc



def execute(args):
    """ Entry point for coastal vulnerability
    
        args['foo'] - description of what this key is


        returns nothing"""
    fields = [  'workspace_dir',
                'population_uri',
                'global_polygon_uri',
                'aoi_uri',
                'cell_size',
                'H_threshold',
                'spread_radius',
                'population_radius',
                'sector_count',
                'land_area_filter',
                'fetch_distance',
                'depth_threshold',
                'bathymetry_uri',
                'relief_uri',
                'mean_sea_level_datum',
                'geomorphology_uri',
                'habitats_directory_uri',
                'habitat_csv_uri',
                'climatic_forcing_grid_uri',
                'surge_potential_uri',
                'sea_level_rise_uri',
                'structures_uri']


    core_args = {}

    # -----------------------------------------
    # Prepare the fields for the core function:
    # -----------------------------------------
    # Working directory:
    # ------------------
    working_directory = args['workspace_dir']
    
    # Cell size:
    # ----------
    cell_size = args['cell_size'] # cell size in meters
    core_args['cell_size'] = cell_size

    # Sector count:
    # -------------
    sector_count = args['sector_count']       # number of equiangular sectors
    core_args['sector_count'] = sector_count

    # Area of interest:
    # -----------------
    aoi_uri = args['aoi_uri']
    aoi = ogr.Open(aoi_uri)
    aoi_array = cvc.array_from_shapefile(aoi, aoi, cell_size)
    core_args['aoi'] = aoi
    
    # Intermediate directory:
    # -----------------------
    intermediate_directory = os.path.join(working_directory, 'intermediate')
    # Create a directory if it doesn't exist yet
    if not os.path.isdir(intermediate_directory):
        os.makedirs(intermediate_directory)
    # Will save intermediate data in 'intermediate_directory'
    save_intermediate = \
        cvc.set_save_info(intermediate_directory, aoi, cell_size)
    core_args['intermediate_directory'] = intermediate_directory

    # Outputs directory:
    # ------------------
    outputs_directory = os.path.join(working_directory, 'outputs')
    if not os.path.isdir(outputs_directory):
        os.makedirs(outputs_directory)
    core_args['outputs_directory'] = outputs_directory
    
    # Population raster file:
    # -----------------------
    if 'population_uri' in args:
        print('detected population data')
        global_population_uri = args['population_uri']
        global_population = gdal.Open(global_population_uri)
        core_args['global_population'] = global_population
    
    # Land polygon:
    # -------------
    if 'global_population_uri' in args:
        print('detected land polygon data')
        landmass_uri = args['global_polygon_uri']
        landmass = ogr.Open(landmass_uri)
        # Convert the landmass to the right projection (aoi's)
        adjusted_landmass =cvc.adjust_shapefile_to_aoi(landmass,aoi, \
            intermediate_directory)
        # Create the land array and initialize it
        land_array = cvc.array_from_shapefile(adjusted_landmass, aoi, cell_size)
        land_array[land_array == 0] = cvc.sea()
        land_array[aoi_array == 0] = cvc.nodata()
        core_args['landmass'] = adjusted_landmass
        core_args['unadjusted_landmass'] = landmass
    
    # Important variables:
    # --------------------
    spread_radius = args['spread_radius'] # spread in meters TODO:standardize this 
    core_args['spread_radius'] = spread_radius
    
    population_radius = args['population_radius'] 
    core_args['population_radius'] = population_radius

    return
    # Climatic forcing grid:
    # ----------------------
    if args.count('climatic_forcing_grid_uri'):
        climatic_forcing_uri = args['climatic_forcing_grid_uri']
        climatic_forcing_data = ogr.Open(climatic_forcing_uri)
        # Adjust the wind/wave data to the aoi:
        climatic_forcing_data = cvc.adjust_shapefile_to_aoi(climatic_forcing_data,\
            aoi, intermediate_directory)
        # TODO: Replace 'wind_wave_data' throughout
        # coastal_vulnerability_core.py
        core_args['wind_wave_data'] = climatic_forcing_data
    
    # Oceanic effect cutoff:
    # ----------------------
    if args.count('H_threshold'):
        print('detected oceanic effect cutoff (H_threshold)')
        H_threshold = args['H_threshold']   # H threshold in m as specified in equ 4.8
        core_args['H_threshold'] = H_threshold
    
    # Bathymetry:
    # -----------
    if args.count('bathymetry_uri'):
        print('detected bathymetry_uri')
        bathymetry_uri = ['bathymetry_uri']
        bathymetry = gdal.Open(bathymetry_uri)
        # TODO: Replace 'DEM' throughout coastal_vulnerability_core.py
        core_args['DEM'] = bathymetry
    
    # Relief:
    # -------
    if args.count('relief_uri'):
        print('detected relief_uri')
        relief_uri = args['relief_uri'] # TODO: do something witht his parameter!!!
        #core_args['DEM'] = bathymetry
    
    # geomorphology:
    # --------------
    if args.count('geomorphology_uri'):
        print('detected geomorphology_uri')
        geomorphology_uri = args['geomorphology_uri']
        geomorphology = ogr.Open(geomorphology_uri)
        core_args['geomorphology'] = geomorphology

    # natural habitats:
    # -----------------
    if args.count('habitats_csv_uri'):
        print('detected habitats_csv_uri')
        habitat_csv_uri = args['habitat_csv_uri']
        habitat_directory = args['habitat_directory_uri']
        core_args['habitat_csv'] = habitat_csv_uri
        core_args['habitat_directory'] = habitat_directory
    
    # surge potential:
    # ----------------
    if args.count('surge_potential_uri'):
        print('detected surge_potential_uri')
        # TODO: Add Surge potential layer 'surge_potential_uri'
        surge_potential_uri = args['surge_potential_uri']
    
    # Sea level rise: 
    # ---------------
    if args.count('sea_level_rise'):
        print('detected sea_level_rise')
        sea_level_rise_uri = args['sea_level_rise_uri']
        sea_level_rise = ogr.Open(sea_level_rise_uri)
        core_args['sea_level_rise'] = sea_level_rise

    # Structures:
    # -----------
    if args.count('structures_uri'):
        print('detected structures_uri')
        structures_uri = args['structures_uri']
        core_args['structures'] = structures_uri

    # Computing fetch and shoreline:
    # ------------------------------
    if args.count('global_polygon_uri'):
        sector_range = range(sector_count)
        sectors_rad = np.array(sector_range, dtype=float) *2 *math.pi /sector_count
        sectors_deg = np.array(sector_range, dtype=int) *360 / sector_count

        # compute the fetch
        print('computing fetch...')
        fetch = cvc.compute_fetch(land_array, sectors_rad, max_fetch)
        core_args['fetch'] = fetch
        max_fetch = args['fetch_distance']        # max fetch in meters
        print('computing shore')
        # Compute the shoreline
        shore_array = cvc.detect_shore(land_array)
        shore_path = save_intermediate(shore_array, 'shore.tif') 
        shore = gdal.Open(shore_path)
        core_args['shore'] = shore
    print('done')

    print('passing arguments to execute_core')
    coastal_vulnerability_core.execute(core_args)

