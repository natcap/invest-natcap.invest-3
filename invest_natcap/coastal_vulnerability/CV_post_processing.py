#:RICH: pylint this and see what makes sense to do
import os

import csv
import numpy as np
from osgeo import gdal

def tiff2csv(tif_uri, csv_uri = None):
    """ Converts a single band geo-tiff file to a csv text file
    
        Inputs:
            -tif_uri: the uri to the file to be converted
            -csv_uri: uri to the output file. The file should not exist.

        Outputs:
            -returns the ouput file uri

        returns nothing"""
    print('current path is ' + os.getcwd())
    # The file has to exist
    assert(os.path.isfile(tif_uri))
    # The file has to be a tif
    extension = os.path.splitext(tif_uri)[1][1:].strip().lower()
    assert(extension == 'tif')
    # Create a uri for the new csv, and ensure it doesn't already exist
    if csv_uri == None:
        csv_uri = os.path.splitext(tif_uri)[0] + '.csv'
    print('csv_uri', csv_uri)
    print('csv_uri exists', os.path.exists(csv_uri))
    assert(not os.path.exists(csv_uri))

    print('converting ' + tif_uri + ' to ' + csv_uri + '...')
    dataset = gdal.Open(tif_uri)
    assert(dataset)
    array = dataset.GetRasterBand(1).ReadAsArray()
    gt = dataset.GetGeoTransform()
    origin = np.array([gt[3], gt[0]])
    step = np.array([gt[5], gt[1]])
    size = np.array([dataset.RasterYSize, dataset.RasterXSize])
    I = np.array(range(size[0])) * step[0] + origin[0]
    J = np.array(range(size[1])) * step[1] + origin[1]
    
    np.set_printoptions(precision = 20)
    with open(csv_uri, 'wb') as csv_file:
        writer = csv.writer(csv_file)
        row = ['x', 'y', 'row', 'col', 'value']
        writer.writerow(row)
        for i in range(size[0]):
            print('writing row ' + str(i) + '/' + str(size[0]))
            for j in range(size[1]):
                row = [J[j], I[i], i, j, array[i, j]]
                writer.writerow(row)

    return csv_uri

# Usage example
#csv_uri = tiff2csv('1_a_shore_exposure.tif')
#print('csv file uri', csv_uri)
