#:RICH: try to avoid loading entire arrays into memory and prefer using vectorize_rasters where possible
#:RICH: pylint this and see what makes sense to do

""" Coastal vulnerability model core functions """
import os
import subprocess
import sys
import csv
import re
import math
import time
import copy
import shutil
import glob

import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
from scipy.interpolate import LinearNDInterpolator as ip
from scipy import spatial
from scipy.ndimage import measurements 
from scipy.ndimage import morphology

from osgeo import gdal
from osgeo import ogr
from osgeo import osr

import logging
from invest_natcap import raster_utils

LOGGER = logging.getLogger('coastal_vulnerability_core')
logging.basicConfig(format='%(asctime)s %(name)-15s %(levelname)-8s \
    %(message)s', level=logging.DEBUG, datefmt='%m/%d/%Y %H:%M:%S ')

SECTOR_COUNT = 16 # Number of equi-angular sectors
MAX_FETCH = 60000 # Longest fetch ray

# TODO: test this
# TODO: change this with vectorize_rasters
def adjust_dataset_ranks(input_uri, output_uri):
    """Adjust the rank of a dataset's first band using 'adjust_layer_ranks'.
    
        Inputs:
            - input_uri: the uri used to load the ranks.  :RICH:WHAT KIND OF FILE DOES IT POINT TO?
            - output_uri: the uri where the result will be stored 
            
        Output:
            - Adjust input_uri's data using 'adjust_layer_ranks', and save it
                in output_uri and return the uri.  :RICH:CAN YOU DESCRIBE 'ADJUST'?"""  
    # Open the raster
    input_raster = gdal.Open(input_uri)
    assert(input_raster)
    input_array = input_raster.GetRasterBand(1).ReadAsArray()
    unique_value = np.unique(input_array)
    # Compute adjusted rank values
    band, old_nodata, rank_data = \
        raster_utils.extract_band_and_nodata(input_raster, get_array = True)
    adjusted_ranks = adjust_layer_ranks(rank_data)
    # Compute nodata--ensure it's of compatible type
    new_nodata = 0.
    new_nodata = raster_utils.gdal_cast(new_nodata, gdal.GDT_Float32)
    # Create the new raster with appropriate data in it
    output_raster = raster_utils.new_raster_from_base(input_raster, \
        output_uri, 'GTiff', new_nodata, gdal.GDT_Byte)
    # Save the array in the raster
    band = output_raster.GetRasterBand(1)
    band.WriteArray(adjusted_ranks)
    # Done. Return the new data as a numpy array.
    return output_uri

# TODO: adapt code for vectorize_rasters
def adjust_layer_ranks(layer):
    """Adjust the rank of a layer in case there are less than 5 values.
    
        Inputs: 
            - layer: a numpy array that encodes data for a layer. :RICH:DESCRIBE THE SIZE AND TYPE OF ARRAY
            
        Output:
            - adjusted_layer: a numpy array with the adjusted rank following
              this logic: :RICH:DESCRIBE SIZE AND TYPE OF ARRAY
                - non-coastal values have a value of zero (0)
                - 1 value for all segments: all have a rank of 3
                - 2 values: - 3 for low values
                            - 4 for higher values
                - 3 values: 2, 3, and 4 by ascending level of vulnerability
                - 4 values: 2, 3, 4, and 5 by ascending level of vulnerability
    """
    # Adjusted ranks as described in Greg's notes, listed in ascending order
    # TODO: Move this to a global scope so that it's accessible from outside
    # this function
    adjusted_ranks = {}
    adjusted_ranks[0] = [1., 2., 3., 4., 5.] # Used to validate input
    adjusted_ranks[1] = [3.]
    adjusted_ranks[2] = [3., 4.]
    adjusted_ranks[3] = [2., 3., 4.]
    adjusted_ranks[4] = [2., 3., 4., 5.]
    # Find unique values, sorted in ascending order, as are the adjusted ranks
    unique_values = np.unique(layer)
    valid_values = np.array(adjusted_ranks[0])
    nodata = np.setxor1d(unique_values, valid_values)
    assert(len(nodata) <= 1, 'One nodata value allowed at most')
    valid_values_only = np.setxor1d(unique_values, nodata)
    # Every element has to be valid, i.e. all elements in adjusted_ranks are in
    # unique
    # If maximum number of values, no need to do anything
    if len(valid_values_only) == len(adjusted_ranks):
        return layer
    # If less than maximum values, create the return array...
    adjusted_layer = np.copy(layer)
    # ...and replace each rank with the predefined ones in adjusted_ranks
    for value in range(unique_values.size):
        input_value = unique_values[value]
        adjusted_value = adjusted_ranks[len(valid_values_only)][value]
        adjusted_layer[layer == input_value] = adjusted_value

    return adjusted_layer

def execute(args):
    """ Entry point for coastal vulnerability core
    
        args['foo'] - actual data structure the way I want them look like  :RICH:DESCRIBE ALL THE ARGUMENTS IN ARGS


        returns nothing"""

    #:RICH: INSTEAD OF A GIANT SINGLE FUNCTION, CAN YOU BREAK EACH OF THESE PIECES INTO ITS OWN FUNCTION, THEN EXECUTE COULD CALL IT IN THE ORDER BELOW AND BE FARILY READABLE ABOUT WHERE IT IS.  ESSENTALLY, EACH OF YOUR IF STATEMENT BODIES BELOW SHOULD HAVE ONLY THIS.  MAKES IT EASIER TO TEST AND/OR PULL APART LATER
    
    # Generation of outputs:
    #:RICH:REPLACED THE FOLLOWING IF ELSE BLOCKS WITH A SINGLE LOOP WHERE YOU LOOP OVER A LIST OF KEYWORDS
    # TODO: document outputs_info
    # The preconditions field is handled the following way:
    # - Every keyword in each inner list in the preconditions is evaluated
    # - An inner list evaluates to True if all its keywords are in args
    # - The main (outer) list evaluates to true if at least one sublist is True
    # - If the precondition evaluates to true, the output is computed
    # Indices in the layer info list
    PREFIX = 0 # String concatenated to every file generated
    KEY = 1 # Output name, used to construct other variables (output, constant)
    OUTPUT_TYPE = 2 # String used to discriminate between layer and non-layer
                    # output, but can be used for any other purpose
    PRECONDITIONS = 3 # List of keys in args required to compute a given output 
    FUNCTION = 4 # Function callback that computes a particular output

    # Create the list of keys for the wave height and wave period:

    outputs_info = [ \
    ['0_', 'structures', 'keep',[['structures_uri']], \
        compute_structure_protection], \
    ['1_a_', 'segment_exposure', 'keep', [['fetch_distances', \
        'fetch_depths']], compute_segment_exposure],\
    ['1_b_', 'geomorphology', 'keep', [['geomorphology_uri']], \
        compute_geomorphology], \
    ['1_c_', 'relief', 're-classify',[['relief_uri']], compute_relief_rank], \
    ['1_d_', 'natural_habitats', 'keep', [['habitats_csv_uri']], \
        compute_natural_habitats_vulnerability], \
    ['1_e_', 'wind_exposure','re-classify',[['climatic_forcing_uri', \
        'fetch_distances']],\
        compute_wind_exposure],\
    ['1_f_', 'wave_exposure', 're-classify', [['climatic_forcing_uri', \
        'fetch_depths']],\
        compute_wave_exposure],\
    ['1_g_', 'surge_potential', 're-classify', [['bathymetry_uri']], \
        compute_surge_potential],\
    ['1_h_', 'sea_level_rise', 're-classify', [['sea_level_rise_uri']], \
        compute_sea_level_rise],\
    ['1_i_','coastal_vulnerability','re-classify',[['geomorphology'], \
    ['relief'], ['surge_potential'], ['sea_level_rise'], ['natural_habitats'],\
    ['wave_exposure']], \
        compute_coastal_vulnerability], \
    ['1_j_', 'coastal_vulnerability_no_habitats', 're-classify', 
        [['natural_habitats', 'coastal_vulnerability']], \
        compute_coastal_vulnerability_no_habitats],\
    ['1_k_', 'habitat_role', 'keep', [['coastal_vulnerability_no_habitats']],\
        compute_habitat_role],\
    ['1_l_', 'erosion_vulnerability', 're-classify', \
    [['geomorphology', 'natural_habitats', 'wave_exposure','sea_level_rise']],\
        compute_erosion_vulnerability],\
    ['1_m_', 'population_map', 'keep', [['population_uri']], \
        compute_coastal_population],\
    ['1_n_', 'additional_layer', 're-classify', [['additional_layer_uri']], \
        compute_additional_layer],\
    ['2_', 'fetch','keep',[['fetch_distance_uris'],['fetch_depth_uris']],\
        save_fetch_to_outputs],\
    ['3_1_', 'structure_edges', 'keep', [['structure_edges']], \
        save_structure_to_subdirectory],\
    ['3_2_', 'erodible_shoreline', 'keep', [['geomorphology']],\
        compute_erodible_shoreline],\
    ['3_3_', 'continental_shelf_distance', 'keep', \
        [['shore_shelf_distance']],\
        compute_continental_shelf_distance],\
    ['3_4_', 'surge_estimate', 'keep', [['continental_shelf']], \
        compute_surge_estimate],\
    ['3_5_', 'wind_generated_waves', 'keep', \
        [['wave_heights', 'wave_periods']], \
        save_wind_generated_waves_to_subdirectory],\
    ['3_6_', 'oceanic_wave_exposure', 'keep', [['E_o']], \
        save_oceanic_wave_exposure_to_subdirectory],\
    ['3_7_', 'local_wave_exposure', 'keep', [['E_l']], \
        save_local_wave_exposure_to_subdirectory], \
    ['4_', 'HTML_page', 'keep', \
        [['coastal_vulnerability'], ['coastal_population'], ['pop_density']], \
        generate_HTML_page]]

    args['outputs_info'] = outputs_info

    # Each intermediate file is copied to its directory based on its prefix.
    for index in range(len(outputs_info)):
        # All the info about this output (list)
        output = outputs_info[index]
        key = output[KEY]
        output_name = key.replace('_', ' ')
        # Add fields to the function arguments
        args['prefix'] = output[PREFIX]
        args['subdirectory'] = args['prefix'] + key 
        # Check that the subdirectory exists
        subdirectory = \
            os.path.join(args['intermediate_directory'], args['subdirectory'])
        if not os.path.exists(subdirectory):
            os.makedirs(subdirectory)
        # Filename in /outputs 
        output_file = output[PREFIX] + key + '.tif'
        output_path=os.path.join(subdirectory, output_file)
        # Dictionary key to the output path
        output_key = key + '_output'
        # Dictionary key to the user-defined output constant
        output_constant = key + '_constant'
        # Check preconditions and list the ones missing
        preconditions_met = np.array([ 
            np.array([keyword in args for keyword in inner_list]).all()
            for inner_list in output[PRECONDITIONS]])
        if preconditions_met.any():
            print('Processing ' + output_name + '...')
            # Compute the ranks for the output, and save in data_uri
            fn_output = output[FUNCTION](args)

            # ----------------
            # Debug, just to make sure no file gets accidentally created.
            entries = glob.glob(os.path.join(args['intermediate_directory'], \
                '*.tif'))
            entries_count = len(entries)
            if entries_count:    
                print('total entries', len(entries))
                for entry in entries:
                    print entry
                assert(len(entries) == 0)
            # ----------------

            # Make sure the new entries won't erase anything in args:
            args_keys = set(args.keys())
            new_keys = set(fn_output.keys())
            intersection = args_keys.intersection(new_keys)
            if intersection:
                error_message = "Output from " + output_name + \
                    ' overlaps with ' + str(intersection) + '.'
                raise RuntimeError(error_message)
            # Reclassify ranks if necessary:
            if output[OUTPUT_TYPE] == 're-classify':
                # Adjust the ranks, save in outputs and save the uri in args
                fn_output[output_key] = \
                    adjust_dataset_ranks(fn_output[key], output_path)
            else:
                assert(output[OUTPUT_TYPE] == 'keep')
            # Add the final outputs to args:
            args = \
                dict(args.items() + fn_output.items())
        else:
            # Preconditions are not met. Print the ones that are missing.
            missing_preconditions = []
            for inner_list in output[PRECONDITIONS]:
                for keyword in inner_list:
                    if keyword not in args:
                        missing_preconditions.append(keyword)
            print(output_name + ' not loaded. missing', missing_preconditions)
            for key in sorted(args.keys()):
                print(key)
            # Assign a constant value to the entire layer if it is specified
            if output_constant in args:
                constant = int(args[output_constant])
                shore_dataset = gdal.Open(args['shore_uri'])
                shore_array = shore_dataset.GetRasterBand(1).ReadAsArray()
                print('assigning', constant, 'to ' + output_name)
                raster = raster_utils.new_raster_from_base( \
                    gdal.Open(args['aoi_raster_uri']), output_file, \
                    'GTIFF', 0.0, gdal.GDT_Float32)
                raster.GetRasterBand(1).WriteArray(shore_array * constant)
                args[output_key] = output_path
            # Skip the layer entirely
            else:
                print('Skipping ' + output_name + '.')
    
    # The files copied so far have their URI returned by the function that
    # created them. However, some extra files might be created (think of .shp
    # and all the extra files that come with it). These files don't have their
    # URI returned by the function that created them, but we need them, so this
    # function takes care of it: copy extra files to their respective folders:
    # Add the pre-processing directory
    outputs_info.insert(0, ['00_', 'preprocessing'])
    old_CWD = os.getcwd()
    preprocessing_dir_uri = os.path.join(os.getcwd(), \
        args['intermediate_directory'], \
        outputs_info[0][0] + outputs_info[0][1])
    if not os.path.exists(preprocessing_dir_uri):
        os.makedirs(preprocessing_dir_uri)
    # The model groups output files in sub-directories.
    # The information about the groups (which files should be in a group) 
    # that are going to be created is organized in a dictionary
    # where each entry describes a group:
    #   -key is the group name,
    #   -value is a list of string tuples that tell how to look for uris:
    #       -tuple[0]: uri selection method. Can be either one of:
    #           -include: add uris which keys include the token in tuple[1]
    #           -match: add only uris which key exactly matches tuple[1]
    #       -tuple[1]: string used to select uris
    # A file can be in more than one group.
    output_groups = { \
        "fetch":[('include', "fetch_distance"), ('include', "fetch_depth"), \
            ('match', "shore_exposure")],
        "wave": [('match', "E_o"), ('match', "E_l"), \
            ('match', 'E_w'), ('match', "wave_exposure"), \
            ('include', "wave_period"), ('include', "wave_height"), \
            ('match', "shore_exposure")],
        "CVI_layers": [('match', "geomorphology"), ('match', "relief"), \
            ('match', "surge_potential"), ('match', "sea_level_rise"), \
            ('match', "natural_habitats"), ('match', "wave_exposure"), \
            ('match', "shore_exposure")],
        "coastal_vulnerability": [('match', "coastal_vulnerability"),
            ('match', "coastal_vulnerability_no_habitats"), \
            ('match', "habitat_role"), ('match', "erodible_shoreline"), \
            ('match', "shore_exposure")],
        "population": [('match', 'coastal_population'), \
            ('match', 'shore_exposure')] \
        }

    # Create groups in the outputs/ folder.
    print('creating groups...')
    uris_to_remove = []
    for name in output_groups.keys():
        # Populate the group with the keys in args
        group_keys = []
        for token_info in output_groups[name]:
            selection_operator = token_info[0]
            file_token = token_info[1]
            # For each token, create a list of uris sorted alphabetically
            sub_group = []
            if selection_operator == 'include':
                for item in args.items():
                    if (file_token in item[0]) and \
                        (type(item[1]) == str) and ('.tif' in item[1]):
                        sub_group.append(item[0])
            elif selection_operator == 'match':
                for item in args.items():
                    if (file_token == item[0]) and \
                        (type(item[1]) == str) and ('.tif' in item[1]):
                        sub_group.append(item[0])
                if not sub_group:
                    message = "Can't include " + file_token + ' in group ' + \
                        name + '. Existing tokens are: ' + \
                        str(sorted(args.keys()))
                    LOGGER.warning(message)
            else:
                assert(False, 'Invalid file selection operator ' + \
                selection_operator + '. Should be either "include" or "match"')
            sub_group.sort()
            # Add the sorted list to the group
            group_keys.extend(sub_group)
        group_size = len(group_keys)
        print('group ' + name + ' size ' + str(group_size))
        # The order of uris should match the keys order
        group_uris = []
        for i in range(group_size):
            group_uris.append(args[group_keys[i]])
        # Bands might have different sizes, so uniformize their sizes by
        # taking the intersection of their extents using align_dataset_list
        #   0- Create the group directories
        #   1- build a list of uris (uri_list) for align_dataset_list
        #   2- invoke align_dataset_list
        # Create the group directories
        directory_uri = os.path.join(args['outputs_directory'], name)
        if not os.path.exists(directory_uri):
            os.makedirs(directory_uri)
        # Step 1, build a list of uris:
        output_uri_list = [os.path.join(directory_uri, os.path.basename(uri)) \
        for uri in group_uris]
        # Step 2: invoke align_dataset_list:
        interpolation_mode = ['nearest'] * group_size
        raster_utils.align_dataset_list(group_uris, output_uri_list,
        interpolation_mode, args['cell_size'], 'intersection', 0)
        print('output uri list:')
        for i in range(len(output_uri_list)):
            out_uri_raster = gdal.Open(output_uri_list[i])
            out_uri_shape = out_uri_raster.GetRasterBand(1).ReadAsArray().shape
            print(out_uri_shape, output_uri_list[i])

    # Do some post-processing (export each group's shore information
    # to a csv file)
    mask_filename = os.path.basename(args['shore_uri'])
    mask_uri = args['shore_uri']
    base_path = os.path.join(os.getcwd(), args['outputs_directory'])
    for group_name in output_groups.keys():
        print('group_name', group_name)
        aggregate_tifs_from_directory( \
            path = os.path.join(base_path, group_name), \
            mask = mask_uri)


    # Create CSVs in the intermediate directories
    # So far, it only creates a CSV in one directory, which is why this looks
    # hacky. The function aggregate_tifs might break if the rasters are not the
    # same size. In this case, they can be clipped with 
    # raster_utils.clip_dataset_list
    processed_dir = os.path.join(args['intermediate_directory'],
        '1_f_wave_exposure')
    dir_content = os.listdir(processed_dir)
    tokens_to_match = ['REI_PCT', 'REI_V', 'WavP_', 'WavPPCT_', \
        'wave_height', 'wave_period']
    files_to_process = []
    for f in dir_content:
        for t in tokens_to_match:
            if t in f:
                #print('adding', f)
                files_to_process.append(os.path.join(processed_dir, f))
                break
    files_to_process = sorted(files_to_process)
    aggregate_tifs_from_list(files_to_process, processed_dir, mask = mask_uri)

    return

def convert_tif_to_csv(tif_uri, csv_uri = None, mask = None):
    """ Converts a single band geo-tiff file to a csv text file
    
        Inputs:
            -tif_uri: the uri to the file to be converted
            -csv_uri: uri to the output file. The file should not exist.

        Outputs:
            -returns the ouput file uri

        returns nothing"""
    # The file has to exist
    assert os.path.isfile(tif_uri)
    # The file has to be a tif
    extension = os.path.splitext(tif_uri)[1][1:].strip().lower()
    assert extension == 'tif'
    # Create a uri for the new csv, and ensure it doesn't already exist
    if csv_uri == None:
        csv_uri = os.path.splitext(tif_uri)[0] + '.csv'
    #assert not os.path.exists(csv_uri), message

    dataset = gdal.Open(tif_uri)
    assert dataset
    array = dataset.GetRasterBand(1).ReadAsArray()
    gt = dataset.GetGeoTransform()
    origin = np.array([gt[3], gt[0]])
    step = np.array([gt[5], gt[1]])
    size = np.array([dataset.RasterYSize, dataset.RasterXSize])
    I = np.array(range(size[0])) * step[0] + origin[0]
    J = np.array(range(size[1])) * step[1] + origin[1]
    
    np.set_printoptions(precision = 20)
    with open(csv_uri, 'wb') as csv_file:
        writer = csv.writer(csv_file)
        #row = ['x', 'y', 'row', 'col', 'value']
        # TODO: use the filename instead of 'value' for the column ID
        row_name = '_'.join(csv_uri.split('.')[0].split('_')[-3:])
        row = ['x', 'y', row_name]
        writer.writerow(row)
        if mask:
            for index in range(mask[0].size):
                i = mask[0][index]
                j = mask[1][index]
                row = [J[j], I[i], array[i, j]]
                writer.writerow(row)
        else:
            for i in range(size[0]):
                #print('writing row ' + str(i) + '/' + str(size[0]))
                for j in range(size[1]):
                    #row = [J[j], I[i], i, j, array[i, j]]
                    row = [J[j], I[i], array[i, j]]
                    writer.writerow(row)
    return csv_uri

def convert_tifs_to_csv(tif_list, mask = None):
    csv_list = []
    for tif_uri in tif_list:
        csv_list.append(convert_tif_to_csv(tif_uri, mask = mask))
    return csv_list

def aggregate_csvs(csv_list, out_uri):
    """Concatenate 3-row csv files created with tif2csv
        
        Inputs:
            - csv_list: list of csv_uri strings
            
        Outputs:
            - uri_output: the output uri of the concatenated csv"""
    assert(os.path.exists(csv_list[0]))
    X = []
    Y = []
    headers = []
    with open(csv_list[0]) as csv_file:
        reader = csv.reader(csv_file)
        reader.next()
        for row in reader:
            X.append(row[0])
            Y.append(row[1])

    aggregated_data = []
    for csv_uri in csv_list:
        assert(os.path.exists(csv_uri))
        data_column = []
        with open(csv_uri) as csv_file:
            reader = csv.reader(csv_file)
            header = reader.next()
            headers.append(header[2])
            for row in reader:
                data_column.append(row[2])
        aggregated_data.append(data_column)

    np.set_printoptions(precision = 20)
    with open(out_uri, 'wb') as csv_file:
        writer = csv.writer(csv_file)
        row = ['x', 'y']
        # Sort CSV row names alphabetically and keep their sorted index
        sorted_column = sorted(range(len(headers)), key = headers.__getitem__)
        # The list of column header names is alphabetically sorted
        for sc in sorted_column:
            row.append(headers[sc])
        writer.writerow(row)
        # The values below the header names are identically sorted
        for r in range(len(X)):
            row = [X[r], Y[r]]
            for sc in sorted_column:
                row.append(aggregated_data[sc][r])
            writer.writerow(row)
    return csv_uri

def aggregate_tifs_from_list(uri_list, path, mask = None):
    if mask:
        assert(os.path.isfile(mask), 'inexistant mask ' + mask)
        raster = gdal.Open(mask)
        assert(raster, 'Invalid raster file ' + mask)
        band = raster.GetRasterBand(1)
        nodata = band.GetNoDataValue()
        array = band.ReadAsArray()
        mask = np.where(array != nodata)
    
    tif_list = []
    for uri in uri_list:
        assert(os.path.exists(uri))
    	if '.tif' in uri:
            tif_list.append(uri)
    tif_count = len(tif_list)
    if not tif_count:
        print('No tifs found in', path)
        return
    dir_name = path.split(os.sep)[-1]
    out_uri = os.path.join(path, dir_name + '.csv')
    print('aggregating ' + str(len(tif_list)) + ' tifs to ' + out_uri)
    csv_list = convert_tifs_to_csv(tif_list, mask = mask)
    aggregate_csvs(csv_list, out_uri)
    for csv in csv_list:
        os.remove(csv)
    
    return out_uri

def aggregate_tifs_from_directory(path = '.', mask = None):
    if mask:
        assert(os.path.isfile(mask), 'inexistant mask ' + mask)
        raster = gdal.Open(mask)
        assert(raster, 'Invalid raster file ' + mask)
        band = raster.GetRasterBand(1)
        nodata = band.GetNoDataValue()
        array = band.ReadAsArray()
        mask = np.where(array != nodata)
    
    assert(os.path.exists(path))
    base_dir = os.getcwd()
    os.chdir(path)

    uri_list = os.listdir('.')
    tif_list = []
    for uri in uri_list:
    	if '.tif' in uri:
            tif_list.append(uri)
    tif_count = len(tif_list)
    if not tif_count:
        print('No tifs found in', path)
        return
    dir_name = os.getcwd().split(os.sep)[-1]
    out_uri = os.path.join(os.getcwd(), dir_name + '.csv')
    print('aggregating ' + str(len(tif_list)) + ' tifs from ' + \
        path + ' to ' + out_uri)
    csv_list = convert_tifs_to_csv(tif_list, mask = mask)
    aggregate_csvs(csv_list, out_uri)
    for csv in csv_list:
        os.remove(csv)
    
    os.chdir(base_dir)

    return out_uri

def generate_HTML_page(args):
    """ Copy local wave exposure to the outputs/ directory.
    
        Inputs:
            args['coastal_vulnerability']: uri to the coastal vulnerability data
            args['coastal_population']: uri to the coastal population data
            args['pop_density']: uri to the population density data
            args['prefix']: prefix to be appended to the new filename
            args['intermediate_directory']: directory where to save the data
            args['outputs_directory']: directory where to save the data
            
        Outputs:
            data_uri: dictionary containing the uri where the data is savedi,
            which includes the three histograms and the HTML file itself.
    """
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    data_uri = {}
    prefix = args['prefix'] + 'HTML'
    data_uri['coastal_vulnerability_histogram'] = \
        os.path.join(intermediate_directory,\
        prefix + '_coastal_vulnerability_histogram.png')
    data_uri['population_vulnerability_histogram'] = \
        os.path.join(intermediate_directory,\
        prefix + '_population_vulnerability_histogram.png')
    data_uri['urban_vulnerability_histogram'] = \
        os.path.join(intermediate_directory, \
        prefix + '_urban_vulnerability_histogram.png')
    #:RICH: say what these are for
    # Values used to create the histograms in Matplotlib
    width = 0.75    # Bin width
    ind = np.arange(5) + 1.0 - width * 0.5 # Space between bins
    bins = np.zeros(len(ind))   # Bin height container
    if 'coastal_vulnerability' in args:
        # Cell rank histogram:
        # 1- Sum all the cells with the same rank
        shore_rank_raster = gdal.Open(args['coastal_vulnerability'])    
        shore_rank = shore_rank_raster.GetRasterBand(1).ReadAsArray()
        for rank in range(len(ind)):
            bins[rank] = np.sum((shore_rank == rank+1).astype(int))
        #:RICH: JUST DESCRIBE WHAT THE MATPLOT LIB ARGUMENTS ARE DOING
        # 2- Create the figure
        fig = plt.figure()  # Get figure handle
        ax = fig.add_subplot(111) # figure array of 1row 1col, select 1st fig.
        # 3- Plot the data
        ax.bar(ind, bins, width, color = 'r')
        # 4- Adjust axes
        plt.xlabel('Vulnerability')
        plt.ylabel('Number of shore segments')
        ax.set_xlim(0.5, 5.5)   # Set the axes within an interval
        ax.grid(True)   # Add lay a grid over the graph (dotted lines)
        # 5- Save the figure to a uri
        plt.savefig(data_uri['coastal_vulnerability_histogram'])
    if 'coastal_population' in args and 'coastal_vulnerability' in args:
        # Population histogram
        # 1- Sum all the cell population with the same rank
        population_raster = gdal.Open(args['coastal_population'])
        population = population_raster.GetRasterBand(1).ReadAsArray()
        shore_rank_raster = gdal.Open(args['coastal_vulnerability'])    
        shore_rank = shore_rank_raster.GetRasterBand(1).ReadAsArray()
        for rank in range(len(ind)):
            bins[rank] = np.sum(population[shore_rank == rank+1])
        # 2- Create the figure
        fig = plt.figure()
        ax = fig.add_subplot(111)
        # 3- Plot the data
        ax.bar(ind, bins, width, color = 'r')
        # 4- Adjust axes
        plt.xlabel('Vulnerability')
        plt.ylabel('Population')
        ax.set_xlim(0.5, 5.5)
        ax.grid(True)
        # 5- Save the figure to a uri
        plt.savefig(data_uri['population_vulnerability_histogram'])
    if 'pop_density' in args and 'coastal_vulnerability' in args:
        # Urban center vulnerability histogram
        # 1- Sum all the urban centers with the same rank
        shore_rank_raster = gdal.Open(args['coastal_vulnerability'])    
        shore_rank = shore_rank_raster.GetRasterBand(1).ReadAsArray()
        pop_density_raster = gdal.Open(args['pop_density'])
        pop_density = pop_density_raster.GetRasterBand(1).ReadAsArray()
        urban_center_threshold = args['urban_center_threshold'] 
        # TODO: fix the 2 lines below
        urban_vulnerability = shore_rank
        #urban_vulnerability = shore_rank[pop_density >= urban_center_threshold]
        for rank in range(len(ind)):
            bins[rank] = np.sum((urban_vulnerability == rank+1).astype(int))
        # 2- Create the figure
        fig = plt.figure()
        ax = fig.add_subplot(111)
        # 3- Plot the data
        ax.bar(ind, bins, width, color = 'r')
        # 4- Adjust axes
        plt.xlabel('Vulnerability')
        plt.ylabel('Shoreline segments close to urban centers')
        ax.set_xlim(0.5, 5.5)
        ax.grid(True)
        # 5- Save the figure to a uri
        plt.savefig(data_uri['urban_vulnerability_histogram'])
    # Creating the actual HTML page
    data_uri['run_summary'] = os.path.join(args['outputs_directory'], \
        args['prefix'] + "run_summary.html")
    try:
        #:RICH: file is a python system name, call it something else
        with open(data_uri['run_summary'], "w") as html_file:
            html_file.write("<html>")
            html_file.write("<title>" + "Marine InVEST" + "</title>")
            html_file.write("<CENTER><H1>" + "Coastal Vulnerability Model" + \
                "</H1></CENTER>")
            html_file.write("<br>")
            html_file.write("This page contains results from running \
                the Marine InVEST Coastal Vulnerability model." + "<p>")
            html_file.write("<br><br>")
            html_file.write("<HR>")
            html_file.write("<table border='1', cellpadding='5'>")
            html_file.write("<tr>")
            html_file.write("<th>Area Of Interest</th>")
            html_file.write("<th>Coastal Vulnerability Histogram</th>")
            html_file.write("</tr>")
            # Extract the layer extents
            aoi = ogr.Open(args['aoi_uri'])
            aoi_layer = aoi.GetLayer(0)
            aoi_extent = aoi_layer.GetExtent()
            # Transform the layer extents in Google map's long/lat coord. system
            lat_long_sr = osr.SpatialReference()
            lat_long_sr.SetWellKnownGeogCS("WGS84")
            aoi_sr = aoi_layer.GetSpatialRef()
            tr = osr.CoordinateTransformation(aoi_sr, lat_long_sr)
            p_min = tr.TransformPoint(aoi_extent[0], aoi_extent[2])
            p_max = tr.TransformPoint(aoi_extent[1], aoi_extent[3])
            # Compute the center, extents and zoom in Google map's coord. system
            center_x = str((p_min[0] + p_max[0]) / 2.)
            center_y = str((p_min[1] + p_max[1]) / 2.)
            extent_x = p_max[0] - p_min[0]
            extent_y = p_max[1] - p_min[1]
            max_extent = max(extent_x, extent_y)
            fraction = 360.0 / max_extent
            zoom = max(int(math.log(fraction, 2.)) - 1, 0)
            html_file.write("<tr>")
            html_file.write('<td><img \
                src=http://maps.googleapis.com/maps/api/staticmap' +
                '?center=' + center_y + ',' + center_x + \
                '&zoom=' + str(zoom) + \
                '&size=400x400' + \
                '&sensor=false ' + \
                'alt="Area Of Interest"/></td>')
            html_file.write("The site is located at:")
            html_file.write("-latitude:" + str(center_y))
            html_file.write("-longitude:" + str(center_x))
            html_file.write('<td><img src="' + os.path.abspath( \
                data_uri['coastal_vulnerability_histogram']) + 
                '" alt="Coastal Vulnerability Histogram"' + \
                'width = "400"' + \
                '></img></td>')
            html_file.write("</tr>")
            html_file.write("<tr>")
            html_file.write("<th>Population Histogram</th>")
            html_file.write("<th>Urban Center Vulnerability Histogram</th>")
            html_file.write("</tr>")
            html_file.write("<tr>")
            html_file.write('<td><img src="' + os.path.abspath( \
                data_uri['population_vulnerability_histogram']) + 
                '" alt="population vulnerability histogram"' + \
                'width = "400"' + \
                '></img></td>')
            html_file.write('<td><img src="' + os.path.abspath( \
                data_uri['urban_vulnerability_histogram']) + 
                '" alt="urban center vulnerability histogram"' + \
                'width = "400"' + \
                '></img></td>')
            html_file.write("</tr>")
            html_file.write("</table>")
            #end page
            html_file.write("</html>")
    #:RICH: specify the exception type here so it doesn't catch everything
    except IOError:
        print('Failed to open the HTML output file!')
    return data_uri

def save_local_wave_exposure_to_subdirectory(args):
    """ Copy local wave exposure to the outputs/ directory.
    
        Inputs:
            args['E_l']: uri to the local wave exposure data
            args['prefix']: prefix to be appended to the new filename
            
        Outputs:
            data_uri: dictionary containing the uri where the data is saved
    """
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    data_uri = {}
    data_uri['local_wave_exposure'] = \
        os.path.join(intermediate_directory, \
        args['prefix'] + 'local_wave_exposure.tif')
    shutil.copy(args['E_l'], data_uri['local_wave_exposure'])
    return data_uri

def save_oceanic_wave_exposure_to_subdirectory(args):
    """ Copy oceanic wave exposure to the outputs/ directory.
    
        Inputs:
            args['E_o']: uri to the oceanic wave exposure data
            args['prefix']: prefix to be appended to the new filename
            
        Outputs:
            data_uri: dictionary containing the uri where the data is saved
    """
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    data_uri = {}
    data_uri['oceanic_wave_exposure'] = \
        os.path.join(intermediate_directory, \
        args['prefix'] + 'oceanic_wave_exposure.tif')
    shutil.copy(args['E_o'], data_uri['oceanic_wave_exposure'])
    return data_uri

def save_wind_generated_waves_to_subdirectory(args):
    """ Copy the wave height and wave period to the outputs/ directory.
    
        Inputs:
            args['wave_height'][sector]: uri to "sector"'s wave height data
            args['wave_period'][sector]: uri to "sector"'s wave period data
            args['prefix']: prefix to be appended to the new filename
            
        Outputs:
            data_uri: dictionary containing the uri where the data is saved
    """
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])

    wave_height_list = args['wave_heights']
    wave_period_list = args['wave_periods']

    data_uri = {}
    for wave_height_uri in wave_height_list:
        shutil.copy(wave_height_uri, intermediate_directory)
    for wave_period_uri in wave_period_list:
        shutil.copy(wave_period_uri, intermediate_directory)
    return data_uri

def compute_continental_shelf_distance(args):
    """ Copy the continental shelf distance data to the outputs/ directory.

        Inputs:
            args['shore_shelf_distance']: uri to the continental shelf distance
            args['prefix']:
    
        Outputs:
            data_uri: a dictionary containing the uri where the data is saved.
    """
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    data_uri = {}
    data_uri['continental_shelf_distance'] = \
        os.path.join(intermediate_directory, \
        args['prefix'] + 'continental_shelf_distance.tif')
    shutil.copy(args['shore_shelf_distance'], \
        data_uri['continental_shelf_distance'])
    return data_uri

def compute_erodible_shoreline(args):
    """Compute the erodible shoreline as described in Greg's notes.
        The erodible shoreline is the shoreline segments of rank 5.
        
        Inputs: 
            args[geomorphology]: the geomorphology data.
            args['prefix']: prefix to be added to the new filename.
            args['aoi_uri']: URI to the area of interest shapefile
            args['cell_size']: size of a cell on the raster
            
        Outputs:
            data_uri: a dictionary containing the uri where the data is saved.
    """
    aoi = ogr.Open(args['aoi_uri'])
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    save_intermediate = \
        set_save_info(intermediate_directory, args['aoi_uri'],
        args['cell_size'], gdal_type = gdal.GDT_Byte)
    data_uri = {}
    data_uri['erodible_shoreline'] = os.path.join(intermediate_directory, \
    args['prefix'] + 'erodible_shoreline.tif')
    uri_list = [args['geomorphology']]
    raster_utils.vectorize_datasets(uri_list, lambda x: 1. if x==5 else 0., \
    data_uri['erodible_shoreline'], gdal.GDT_Float32, 0., args['cell_size'], \
    'intersection', aoi_uri = args['aoi_uri'])
    return data_uri

def save_structure_to_subdirectory(args):
    """ Save structure data to its intermediate subdirectory, under a custom 
    prefix.
        
        Inputs: 
            args['structure_edges']: the data's uri to save to /outputs
            args['prefix']: prefix to add to the new filename. Currently used to
                mirror the labeling of outputs in Greg's notes.

        Outputs:
            data_uri: a dictionary of the uri where the data has been saved.
    """
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    data_uri = {}
    data_uri['structure_edges_subdir'] = \
        os.path.join(intermediate_directory, args['prefix'] + \
        'structure_edges.tif')
    shutil.copy(args['structure_edges'], data_uri['structure_edges_subdir'])
    return data_uri

def save_fetch_to_outputs(args):
    """ Function that copies the fetch information (depth and distances)
        in the outputs directory.
        
        Inputs: 
            args['fetch_distance_uris']: A dictionary of ('string':string)
                entries where the first string is the sector in degrees, and
                the second string is a uri pointing to the file that contains
                the fetch distances for this sector.
            args['fetch_depths_uris']: A dictionary similar to the depth one,
                but the second string is pointing to the file that contains
                fetch depths, not distances.
            args['prefix']: String appended before the filenames. Currently
                used to follow Greg's output labelling scheme.

        Outputs:
            - data_uri that contains the uri of the new files in the outputs 
                directory, one for fetch distance and one for fetch depths for 
                each fetch direction 'n', for a total of 2n.
            """
    data_uri = {}
    prefix = args['prefix']
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    fetch_distance_uris = args['fetch_distance_uris']
    for sector in range(len(fetch_distance_uris)):
        destination = os.path.join(intermediate_directory, \
            prefix + 'fetch_distance_' + str(sector).zfill(3) + '.tif')
        shutil.copy(fetch_distance_uris[sector], destination)
        data_uri['fetch_distance_' + str(sector).zfill(3)] = destination
    fetch_depth_uris = args['fetch_depth_uris']
    for sector in range(len(fetch_depth_uris)):
        destination = os.path.join(intermediate_directory, \
            prefix + 'fetch_depth_' + str(sector).zfill(3) + '.tif')
        shutil.copy(fetch_depth_uris[sector], destination)
        data_uri['fetch_depth_' + str(sector).zfill(3)] = destination
    return data_uri

def compute_erosion_vulnerability(args):
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    prefix = args['prefix'] + 'EROSION'
    data_uri = {}

    layer_uri_list = []  # List of layers used in the computation of the C.V.
    # Get the raw layer info from args
    info = args['outputs_info'][12]
    # Make sure this is what we expect
    message = 'Outputs info[12][0] does not refer to "1_l_", but to ' + \
    str(info)
    assert info[0] == '1_l_', message
    # Extract the names of the available layers
    layer_names = info[3][0]
    for layer in layer_names:
        if layer in args:
            layer_uri_list.append(args[layer])
    assert(len(layer_uri_list) > 0)
    layer_uri_list.append(args['shore_uri'])
    # The function that computes the coastal vulnerability no habitats index:
    # 0s will be assigned to places other than the shoreline
    # The dividend should not count the shore, hence x.size - 1
    def erosion_vulnerability(*x):
        x = np.array(x)
        return np.round(np.power(np.prod(x), 1./(x.size - 1.)))
    # Save new layer
    data_uri['erosion_no_structures'] = os.path.join(intermediate_directory, \
    prefix + '_without_structures.tif')
    data_uri['erosion_vulnerability'] = data_uri['erosion_no_structures']
    raster_utils.vectorize_datasets(layer_uri_list, \
    erosion_vulnerability, data_uri['erosion_no_structures'], \
    gdal.GDT_Float32, 0., args['cell_size'], "intersection")
    
    # Adjust for structures if structure data exists 
    if 'structure_edges' in args:
        # Input uris
        data_uri['erosion_vulnerability']=os.path.join(intermediate_directory,\
        prefix + '_with_structures.tif')
        # Output uris
        uri_list = [data_uri['erosion_no_structures'], \
        args['structure_edges'], args['shore_uri']]
        # Function that adjusts for structures
        def adjust_for_structures(CV, structure, shore):
            return max(1., CV - structure) * shore
        # Compute new layer
        raster_utils.vectorize_datasets(uri_list, adjust_for_structures, \
        data_uri['erosion_vulnerability'], gdal.GDT_Float32, 0., \
        args['cell_size'], "intersection")
    return data_uri

def compute_habitat_role(args):
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])

    data_uri = {}

    def habitat_role(CV, CV_no_habitats, shore):
        return ((5. - CV) * CV_no_habitats / 4.) * shore

    uri_list = [args['coastal_vulnerability'], \
    args['coastal_vulnerability_no_habitats'], args['shore_uri']]
    data_uri['habitat_role'] = os.path.join(intermediate_directory, \
    args['prefix'] + 'habitat_role.tif')
    raster_utils.vectorize_datasets(uri_list, habitat_role, \
    data_uri['habitat_role'], gdal.GDT_Float32, 0., args['cell_size'], \
    "intersection")

    return data_uri

def compute_coastal_vulnerability_no_habitats(args):
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    prefix = args['prefix'] + 'CV_no_hab'
    data_uri = {}

    layer_uri_list = []  # List of layers used in the computation of the C.V.
    # Get the raw layer info from args
    info = args['outputs_info'][9]
    # Make sure this is what we expect
    message = 'Outputs info[9] does not refer to "1_i_", but to ' +str(info[0])
    assert info[0] == '1_i_', message
    # Extract the names of the available layers
    layer_names = \
    [layer[0] for layer in info[3] if layer[0] is not 'natural_habitats']
    for layer in layer_names:
        if layer in args:
            layer_uri_list.append(args[layer])
    assert(len(layer_uri_list) > 0)
    layer_uri_list.append(args['shore_uri'])
    # The function that computes the coastal vulnerability no habitats index:
    # Add 5 to the list of parameters, to account for natural_habitats == 5
    # The dividend should not count the shore, but add hab: x.size + 1 - 1
    # 0s will be assigned to places other than the shoreline
    def CV_no_habitats_index(*x):
        x = x + (5,)
        x = np.array(x)
        return np.round(np.power(np.prod(x), 1./x.size))
    # Save new layer
    data_uri['CV_no_hab_no_structures'] = os.path.join(intermediate_directory, \
    prefix + '_without_structures.tif')
    data_uri['coastal_vulnerability_no_habitats'] = \
    data_uri['CV_no_hab_no_structures']
    raster_utils.vectorize_datasets(layer_uri_list, \
    CV_no_habitats_index, data_uri['CV_no_hab_no_structures'], \
    gdal.GDT_Float32, 0., args['cell_size'], "intersection")
    
    # Adjust for structures if structure data exists 
    if 'structure_edges' in args:
        # Input uris
        data_uri['coastal_vulnerability_no_habitats'] = \
        os.path.join(intermediate_directory, prefix + '_with_structures.tif')
        # Output uris
        uri_list = [data_uri['CV_no_hab_no_structures'], \
        args['structure_edges'], args['shore_uri']]
        # Function that adjusts for structures
        def adjust_for_structures(CV, structure, shore):
            return max(1., CV - structure) * shore
        # Compute new layer
        raster_utils.vectorize_datasets(uri_list, adjust_for_structures, \
        data_uri['coastal_vulnerability_no_habitats'], gdal.GDT_Float32, \
        0., args['cell_size'], "intersection")
    return data_uri

def compute_coastal_vulnerability(args):
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    prefix = args['prefix'] + 'CV'
    data_uri = {}

    layer_uri_list = []  # List of layers used in the computation of the C.V.
    # Get the raw layer info from args
    info = args['outputs_info'][9]
    # Make sure this is what we expect
    message = 'Outputs info[9] does not refer to "1_i_", but to ' +str(info[0])
    assert info[0] == '1_i_', message
    # Extract the names of the available layers
    layer_names = [layer[0] for layer in info[3]]
    for layer in layer_names:
        if layer in args:
            layer_uri_list.append(args[layer])
    assert(len(layer_uri_list) > 0)
    layer_uri_list.append(args['shore_uri'])
    # The function that computes the coastal vulnerability index:
    # 0s will be assigned to places other than the shoreline
    # The dividend should not count the shore, hence x.size - 1
    def coastal_vulnerability_index(*x):
        x = np.array(x)
        return np.round(np.power(np.prod(x), 1./(x.size - 1)))
    # Save new layer
    data_uri['CV_without_structures'] = os.path.join(intermediate_directory, \
    prefix + '_coastal_vulnerability_without_structures.tif')
    data_uri['coastal_vulnerability'] = data_uri['CV_without_structures']
    raster_utils.vectorize_datasets(layer_uri_list, \
    coastal_vulnerability_index, data_uri['CV_without_structures'], \
    gdal.GDT_Float32, 0., args['cell_size'], "intersection")
    
    # Adjust for structures if structure data exists 
    if 'structure_edges' in args:
        # Input uris
        data_uri['coastal_vulnerability']=os.path.join(intermediate_directory,\
        prefix + '_with_structures.tif')
        # Output uris
        uri_list = [data_uri['CV_without_structures'], \
        args['structure_edges'], args['shore_uri']]
        # Function that adjusts for structures
        def adjust_for_structures(CV, structure, shore):
            return max(1., CV - structure) * shore
        # Compute new layer
        raster_utils.vectorize_datasets(uri_list, adjust_for_structures, \
        data_uri['coastal_vulnerability'], gdal.GDT_Float32, 0., \
        args['cell_size'], "intersection")
    return data_uri

def compute_segment_exposure(args):
    """ Compute exposed and sheltered shoreline segment map."""
    no_data = -1.0
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    save_intermediate = \
    set_save_info(intermediate_directory, args['aoi_uri'], args['cell_size'])

    data_uri = {}
    fetch_distances = args['fetch_distances']
    fetch_depths = args['fetch_depths']
    max_fetch = args['max_fetch']
    depth_threshold = args['depth_threshold']
    prefix = args['prefix'] + 'SEGMENT_EXPOSURE'

    shore_raster = gdal.Open(args['shore_uri'])
    shore_array = shore_raster.GetRasterBand(1).ReadAsArray()
    # Number (count) of enclosed/shallow rays
    depth_count = np.ones_like(shore_array) * no_data
    distance_count = np.ones_like(shore_array) * no_data
    # Average depth
    avg_depth = np.ones_like(shore_array) * no_data
    avg_distance = np.ones_like(shore_array) * no_data
    # Percentage of enclosed/shallow rays
    depth_pct = np.ones_like(shore_array) * no_data
    distance_pct = np.ones_like(shore_array) * no_data
    # Boolean value of enclosed/shallow criteria for each segment
    shallow_segments = np.ones_like(shore_array) * no_data
    enclosed_segments = np.ones_like(shore_array) * no_data

    # Compute the exposure threshold and round it to the closest integer
    sector_count = SECTOR_COUNT
    exposure_proportion = args['exposure_proportion']

    # Determine if each shoreline segment is enclosed or shallow 
    # and assign the segment 3 if sheltered, or 4 if not:
    SHELTERED_SHORE = 0
    EXPOSED_SHORE = 1
    shore_segments = fetch_distances.keys()
    shore_exposure = np.ones_like(shore_array) * no_data
    # Each segment has a numpy array for the fetch distances and a numpy array
    # for the fetch depth
    np.set_printoptions(precision = 1)
    for segment in shore_segments:
        distances = fetch_distances[segment]
        depths = fetch_depths[segment] * -1 # make depths positive
        # Remove rays that reach land on the first pixel:
        valid_rays = \
            np.where((distances >= args['cell_size']) & (depths > 0.))
        valid_rays_count = valid_rays[0].size
        count_threshold = int(round(exposure_proportion * valid_rays_count))

        distances = distances[valid_rays]
        depths = depths[valid_rays]

        short_rays = np.sum((distances < max_fetch).astype(int))
        shallow_rays = np.sum((depths < depth_threshold).astype(int))
        
        is_segment_protected = short_rays >= count_threshold
        is_segment_shallow = shallow_rays >= count_threshold

        # Avoid division by zero
        if valid_rays_count == 0:
            distance_count[segment] = 0
            avg_distance[segment] = no_data
            distance_pct[segment] = 1.
            enclosed_segments[segment] = 1
            depth_count[segment] = 0
            avg_depth[segment] = no_data
            depth_pct[segment] = 1.
            shallow_segments[segment] = 1
        else:
            distance_count[segment] = short_rays
            avg_distance[segment] = np.average(distances)
            distance_pct[segment] = \
                float(short_rays) / valid_rays_count
            enclosed_segments[segment] = is_segment_protected
            depth_count[segment] = shallow_rays
            avg_depth[segment] = np.average(depths)
            depth_pct[segment] = \
                float(shallow_rays) / valid_rays_count
            shallow_segments[segment] = is_segment_shallow

        # segment is sheltered
        #print('protected', is_segment_protected, 'shallow', is_segment_shallow)
        if is_segment_protected or is_segment_shallow:
            shore_exposure[segment] = SHELTERED_SHORE
        # segment is not sheltered
        else:
            shore_exposure[segment] = EXPOSED_SHORE
    
    data_uri['enclosed_segments'] = \
        save_intermediate(distance_count, \
        prefix + '_1_enclosed_segments.tif', no_data = no_data)
    
    data_uri['fetch_distance_average'] = \
        save_intermediate(avg_distance, \
        prefix + '_2_fetch_distances_average.tif', no_data = no_data)

    data_uri['enclosed_segments_pct'] = \
        save_intermediate(distance_pct, \
        prefix + '_3_enclosed_segments_pct.tif', no_data = no_data)

    data_uri['enclosed_segments_bool'] = \
        save_intermediate(enclosed_segments, \
        prefix + '_4_enclosed_segments_bool.tif', no_data = no_data)

    data_uri['shallow_segments'] = \
        save_intermediate(depth_count, \
        prefix + '_5_shallow_segments.tif', no_data = no_data)
    
    data_uri['fetch_depths_average'] = \
        save_intermediate(avg_depth, \
        prefix + '_6_fetch_depths_average.tif', no_data = no_data)
    
    data_uri['shallow_segments_pct'] = \
        save_intermediate(depth_pct, \
        prefix + '_7_shallow_segments_pct.tif', no_data = no_data)
    
    data_uri['shallow_segments_bool'] = \
        save_intermediate(shallow_segments, \
        prefix + '_8_shallow_segments_bool.tif', no_data = no_data)
    
    data_uri['shore_exposure'] = \
        save_intermediate(shore_exposure, args['prefix'] +
        'shore_exposure.tif', no_data = no_data)
    # Mask the shoreline for which we don't want an output
    if args['area_computed'] == 'sheltered':
        shore_array[shore_exposure == EXPOSED_SHORE] = 0
    # Save the new shore over which all the computation will now take place
    shore_raster = gdal.Open(args['shore_uri'], gdal.GA_Update)
    shore_raster.GetRasterBand(1).WriteArray(shore_array)

    return data_uri 

def compute_structure_protection(args):
    """Compute the structure influence on the shore to later include it in the
    computation of the layers final rankings, as is specified in Gregg's 
    the additional notes (decrement ranks around structure edges).
    
        Inputs: 
            - args['aoi_uri']: string uri to the datasource of the area of 
                interest
            - args['shore_uri']: dataset uri of the coastline within the AOI
            - args['structures_uri']: string of the structure datasource uri
            - args['cell_size']: integer of the size of a pixel in meters
            - args['intermediate_directory']: string of the uri where 
                intermediate files are stored
            - args['prefix']: string prefix appended to every intermediate file

        Outputs:
            - data_uri: a dictionary of the file uris generated in the
              intermediate directory.
            - data_uri['adjusted_structures']: string of the dataset uri
              obtained from reprojecting args['structures_uri'] and burining it 
              onto the aoi. Contains the structure information across the whole
              aoi.
            - data_uri['shore_structures']: string uri pointing to the
              structure information along the coast only.
            - data_uri['structure_influence']: string uri pointing to a
              datasource of the spatial influence of the structures.
            - data_uri['structure_edge']: string uri pointing to the datasource
              of the edges of the structures.
            """
    shore_raster = gdal.Open(args['shore_uri'])
    cell_size = args['cell_size']
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    prefix = args['prefix'] + 'STRUCT'
    file_count = 0
    # set to save in 'intermediate_directory'
    save_intermediate = \
    set_save_info(intermediate_directory, args['aoi_uri'], cell_size)
    # Dictionary that contains the data's uri indexed by name
    data_uri = {} 
    # Create a kernel to detect the structure edges:
    #   - values >= 9: the shore is armored
    #   - values between 1 and 8: more vulnerable shore segment
    #   - values == 0: segment not influenced by a structure
    kernel = np.array([[-1, -1, -1],
                       [-1, -9, -1],
                       [-1, -1, -1]])
    # Compute the structure edge using convolution:
    shore_structures = gdal.Open(args['structures_raster_uri'])
    shore_structures_array = shore_structures.GetRasterBand(1).ReadAsArray()
    structure_influence = sp.signal.convolve2d(shore_structures_array, \
        kernel, mode='same').astype('int')
    data_uri['structure_influence'] = save_intermediate(structure_influence, \
        prefix + '_' + str(file_count) + '_structure_influence.tif')
    file_count +=1
    # Adjust shore classification from the convolution:
    #   - near structure shore segment: 1 (convolved values -1 to -8)
    #   - off structure shore segment: 0 (convolved value of 0)
    data_uri['structure_edges'] = os.path.join(intermediate_directory, \
        prefix + '_' + str(file_count) + '_structure_edges.tif')

    def compute_structure_edge(influence, shore):
        # Not on the shore: return nodata
        if shore == 0:
            return 0
        # On the shore, investigate further
        else:
            # On the structure edge: return 1
            if (influence < 0) and (influence > -9):
                return 1
            # Not on the structure edge: return nodata
            else:
                return 0

    structure_influence_raster = gdal.Open(data_uri['structure_influence'])
    shore_structures = \
        raster_utils.vectorize_rasters([structure_influence_raster, \
        shore_raster], compute_structure_edge, ogr.Open(args['aoi_uri']), \
        data_uri['structure_edges'], gdal.GDT_Byte, 0)

    return data_uri

# TODO: update docstrings
def compute_coastal_population(args):
    """Compute population living along the shore within a given radius.
    
        Inputs:
            - args['aoi']: area of interest within which to save the data
            - args['shore_uri']: uri to coastline dataset within the AOI where
              coastal segments are 1s and everything else 0s.
            - args['cell_size']: size of a pixel in meters
            - args['intermediate_directory']: uri to a directory where 
              intermediate files are stored
            - args['population_uri']: uri to the population density dataset.
            - args['population_radius']: used to compute the population density.

        Outputs:
            - Return a uri dictionary of all the files created to generate the
              population density along the coastline

        Intermediate outputs:
            - resampled_population.tif: generated only if the original
                population file has a different resolution than cell_size
            - clipped_population.tif: raster data clipped to the AOI
            - pop_density.tif: raster where each point indicates the total 
                population living within 'population_radius' from that point
            - coastal_population.tif: same as pop_density, but only for points
                along the shore."""
    cell_size = args['cell_size']
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    prefix = args['prefix'] + 'COASTAL_POP'
    file_count = 0
    population = gdal.Open(args['population_uri'])
    population_radius = args['population_radius']
    # set to save in 'intermediate_directory'
    save_intermediate = \
    set_save_info(intermediate_directory, args['aoi_uri'], cell_size)
    # Dictionary that contains the data's uri indexed by name
    data_uri = {} 

    # TODO: replace this with adjust_shapefile_to_aoi
    # The aoi should be projected
    srs = osr.SpatialReference()
    srs.ImportFromWkt(shapefile_wkt_projection(ogr.Open(args['aoi_uri'])))
    assert(srs.IsProjected(), \
        'Error: AOI is not projected. Please provide a projected AOI.')
    raster = population
    # Try to resample the raster to cell_size
    srs = osr.SpatialReference()
    srs.ImportFromWkt(raster_wkt_projection(raster))
    if srs.IsProjected():
        pixel_size = raster_utils.pixel_size(raster)
        if not pixel_size == cell_size:
            data_uri['resampled_population'] = \
            os.path.join(intermediate_directory, \
            prefix + '_' + str(file_count) +'_resampled_population.tif')
            file_count +=1
            # TODO: Use resample_dataset instead
            raster=raster_utils.reproject_dataset(raster,\
            cell_size, raster.GetProjection(), \
            data_uri['resampled_population'])
    # Test that the projections are identical
    projections = [raster_wkt_projection(raster), 
                   shapefile_wkt_projection(ogr.Open(args['aoi_uri']))]
    projected_aoi_uri = args['aoi_uri']
    if not projections_match(projections):
        raster_wkt = raster_wkt_projection(raster)
        data_uri['population_reprojected_aoi'] = \
            os.path.join(intermediate_directory, prefix+'_'+str(file_count)+\
            '_population_reprojected_aoi.shp')
        file_count +=1
        raster_utils.reproject_datasource(ogr.Open(args['aoi_uri']), \
        raster_wkt, data_uri['population_reprojected_aoi'])
        projected_aoi_uri = data_uri['population_reprojected_aoi']
    # Clip the raster to the AOI
    data_uri['clipped_population'] = \
        os.path.join(intermediate_directory, \
        prefix + '_' + str(file_count) + '_clipped_population.tif')
    file_count +=1
    raster = raster_utils.clip_dataset(raster, ogr.Open(projected_aoi_uri), \
        data_uri['clipped_population'])
    raster_shape = raster.GetRasterBand(1).ReadAsArray().shape
    # Resample or reproject population raster back to AOI's projection.
    pixel_size = raster_utils.pixel_size(raster)
    if not projections_match(projections): 
        print('Projections don\'t match, reprojecting dataset to AOI')
        data_uri['reprojected_population'] = \
        os.path.join(intermediate_directory, \
        prefix + '_' + str(file_count) + '_reprojected_population.tif')
        file_count +=1
        aoi_wkt = shapefile_wkt_projection(ogr.Open(args['aoi_uri']))
        raster = raster_utils.reproject_dataset(raster, cell_size, aoi_wkt, \
            data_uri['reprojected_population'], gdal.GDT_Int32)
    elif not pixel_size == cell_size:
        data_uri['resampled_population'] = \
        os.path.join(intermediate_directory, \
        prefix + '_' + str(file_count) + '_resampled_population.tif')
        aoi_wkt = shapefile_wkt_projection(ogr.Open(args['aoi_uri']))
        raster = raster_utils.reproject_dataset(raster, cell_size, aoi_wkt, \
            data_uri['resampled_population'], gdal.GDT_Int32)
    # Adjust the raster size if its shape has changed (due to projections)
    aoi_uri = os.path.join(intermediate_directory, \
            prefix + '_' + str(file_count) + '_aoi.tif')
    file_count +=1
    data_uri['coastal_population_aoi'] = aoi_uri
    aoi_raster = gdal.Open(args['aoi_raster_uri'])
    aoi_shape = aoi_raster.GetRasterBand(1).ReadAsArray().shape
    if not aoi_shape == raster_shape:
        clipped_population_uri = \
                os.path.join(intermediate_directory, \
                prefix + '_' + str(file_count) + '_clipped_population.tif')
        file_count +=1
        raster = raster_utils.clip_dataset(raster, ogr.Open(args['aoi_uri']), \
            clipped_population_uri)
        data_uri['clipped_population'] = clipped_population_uri
    # Create a kernel to gather the total population within a given radius
    R = (population_radius/cell_size) if population_radius >= cell_size else 1. 
    kernel = disc_kernel(R)
    # Convolve the population with the kernel
    band= raster.GetRasterBand(1)
    pop_array = band.ReadAsArray()
    nodata = band.GetNoDataValue()
    pop_array[pop_array == nodata] = 0
    pop_density = sp.signal.convolve2d(pop_array, kernel,mode='same')
    data_uri['pop_density'] = save_intermediate(pop_density, \
        prefix + '_' + str(file_count) + "_pop_density.tif")
    file_count +=1
    pop_density = gdal.Open(data_uri['pop_density'])
    # Compute the population along the coast
    # NOTE: This notation is really not intuitive, compared to a straight
    # product as is on the user guide. All this because of the raster sizes
    # that are incompatible. What about a function that uniformizes the raster
    # sizes, and use it if the the raster sizes don't agree? We could write:
    # if not raster_sizes_agree(raster_list):
    #    uniformize_raster_sizes(raster_list)
    #
    # And then simply write:
    # coastal_population = pop_density * shore
    #
    data_uri['coastal_population'] = \
        os.path.join(intermediate_directory, \
        prefix + '_' + str(file_count) + '_coastal_population.tif')
    file_count +=1
    no_data = raster_utils.calculate_value_not_in_dataset(pop_density)
    coastal_pop = raster_utils.vectorize_rasters(\
        [pop_density, gdal.Open(args['shore_uri'])], \
        lambda x,y: x*y, ogr.Open(args['aoi_uri']), data_uri['coastal_population'], \
        gdal.GDT_Float32, no_data)
    # Save data in output folder
    shutil.copy(data_uri['coastal_population'], 
    os.path.join(intermediate_directory, args['prefix'] + \
        'coastal_population.tif'))
    # Done
    return data_uri
   
def compute_surge_estimate(args):
    """Compute the surge estimate as defined in equation 4 of Greg's notes.
    
        Inputs: 
            L_s: length of the continental shelf, defined as the distance
                between the shoreline segment and the closest point on the
                edge of the continental shelf.
            h_0: average depth from the continental shelf to the shoreline
            U: Speed of the wind blowing in the same orientation as the
                shelf from the shoreline -- Note: the convention for 
                orientations is that direction vectors point where wind 
                and wave come from, and not where they go to.
        Output: surge estimate as is defined in Greg's notes, output 3.4.
        """
    def k(U):
        """Return 'k' as indicated in equation 5 of Greg's supplementary notes
        
            Input: U- Speed of the wind blowing in the same orientation as the
            shelf from the shoreline -- Note: the convention for orientations 
            is that direction vectors point where wind and wave come from, 
            and not where they go to."""
        result = 1.2 / 1000000.
        if U > 5.6:
            result += 2.25 / 1000000. * math.pow((1 - 5.6/U), 2)
        return result

    def Tau_w(U):
        """Compute \tau_w as is mentioned in section 3.4 of Greg's notes.
            
            Input: U- Speed of wind blowing in the same orientation as the
                shoreline.

            Output: \tau_w as is mentioned in section 3.4 of Greg's notes.
        """
        return 1024 * k(U) * U*U
        
    def A(L_s, U, h_0):
        """ Compute A as is mentioned in section 3.4 of Greg's notes.
    
        Inputs: L_s: length of the continental shelf, defined as the distance
                between the shoreline segment and the closest point on the
                edge of the continental shelf.
                U: Speed of wind
                h_0: average depth from the continental shelf to the shoreline
        Output: 'A' as is defined in Greg's notes"""
        return 1.225 * L_s * Tau(U) / (1024 * 9.81 * h_0 * h_0)
    
    def eta_c(L_s, U, h_0):
        """Compute surge estimate as in eq.(4) in section 3.4 of Greg's notes.
    
        Inputs: L_s: length of the continental shelf, defined as the distance
                between the shoreline segment and the closest point on the
                edge of the continental shelf.
                U: Speed of wind
                h_0: average depth from the continental shelf to the shoreline
        Output: eta_c as defined in equation 4 in Greg's notes"""
        return h_0 * (math.sqrt(1 + 2 * A / L_s) - 1)

    # TODO: replace by vectorize_rasters
    prefix = args['prefix'] + 'SURGE_EST'
    data_uri = {}
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    # set to save in 'intermediate_directory'
    save_intermediate = set_save_info(intermediate_directory,\
        args['aoi_uri'], args['cell_size'])
    # Compute continental shelf edges
    # TODO: Move this to a function
    continental_shelf_uri = args['continental_shelf']
    shelf_dataset = gdal.Open(continental_shelf_uri)
    shelf_array = shelf_dataset.GetRasterBand(1).ReadAsArray()
    kernel = np.array([[-1., -1., -1.], [-1., 8., -1.], [-1., -1., -1.]])
    shelf_edge = sp.signal.convolve2d(shelf_array, kernel, mode='same')
    # TODO: Remove the shore artifacts!
    data_uri['surge_estimate_all_edges'] = \
        save_intermediate(shelf_edge, prefix + '_0_all_edges.tif')

    # TODO: For loop for 16 sectors, extract wind speeds for the shoreline 
    # segments only.
    # Create a raster dict of the wind intensity U_n
#    wind = assign_dictionary(extract_REI_V(wind_data, aoi, cell_size, path))

#    shore_dataset = gdal.Open['shore_uri']
#    shore_array = shore_dataset.GetRasterBand(1).ReadAsArray()
#    surge_estimate = np.copy(shore_array)

#    shore_segments = np.where(shore_array == shore())
#    shelf_segments = np.where(shelf_edge   > 0)

#    tree = spatial.KDTree(shelf_segments)
#    L_s, shelf_indices = tree.query(shore_segments)

#    shore_to_shelf = shelf_edge[shelf_indices] - shore_segments
#    norm_direction = np.sqrt(np.sum(np.pow(shore_to_shelf, 2.)))
#    step_count = np.max(shore_to_shelf, axis=0)
#    unit_step = shore_to_shelf / step_count
    
#    for segment in shore_segments:
        # Compute the indices from the shore to the shelf
#        path = [shore_segments[segment] + step * unit_step[segment] \
#            for step in range(step_count[segment])]
        # Compute h_0
#        h_0 = bathymetry_array[path]
        # Find the sector's angle and U
#        angle = math.atan2(-norm_direction[segment,1],norm_direction[segment,2])
        # Find the sector
        # TODO: conversion functions:
        #   -angle_rad -> sector
        #   -direction_vector -> angle
        #   -fetch_direction -> direction_vector
#        sector = int(angle * 180.0 / math.pi)
        # Find the wind speed
#        U[segment] = wind[segment_id, sector] 
        # Compute surge estimate
#        surge_estimate[segment] = eta_c(L_s, U, h_0)
    data_uri['surge_estimate'] = data_uri['surge_estimate_all_edges']
    return data_uri

# TODO: Add option to set continental shelf depth threshold
def compute_surge_potential(args):
    """Compute surge potential index as described in the user manual.
    
        Inputs:
            - args['bathymetry']: bathymetry DEM file.
            - args['landmass']: shapefile containing land coverage data (land =
              1, sea = 0)
            - args['aoi_uri']: uri to the datasource of the area of interest
            - args['shore_uri']: uri to a shore raster where the shoreline is 1,
              and everything else is 0.
            - args['cell_size']: integer number for the cell size in meters
            - args['intermediate_directory']: uri to the directory where 
              intermediate files are stored

        Output:
            - Return R_surge as described in the user guide.
            
        Intermediate outputs:
            - rasterized_sea_level_rise.tif:rasterized version of the shapefile
            - shore_level_rise.tif: sea level rise along the shore.
            - sea_level_rise.tif: sea level rise index along the shore."""
    bathymetry = gdal.Open(args['bathymetry_uri'])
    landmass = gdal.Open(args['landmass_raster_uri'])
    shore_raster = gdal.Open(args['shore_uri'])
    shore_array = shore_raster.GetRasterBand(1).ReadAsArray()
    shore_points = np.where(shore_array == 1)
    shore_array = None
    shore_raster = None
    exposure_raster = gdal.Open(args['shore_exposure'])
    exposure_array = exposure_raster.GetRasterBand(1).ReadAsArray()
    exposed_segments = np.where(exposure_array == 1)
    exposure_array = None
    exposure_raster = None
    cell_size = args['cell_size']
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    prefix = args['prefix'] + 'SURGE'
    file_count = 0
    nodata = -1
    # set to save in 'intermediate_directory'
    save_intermediate = \
    set_save_info(intermediate_directory, args['aoi_uri'], cell_size)
    # Dictionary that contains the data's uri indexed by name
    data_uri = {} 
    
    # Get the edge of the continental shelf
    edge_points = None
    if 'continental_shelf_raster_uri' in args:
        continental_shelf_raster = \
            gdal.Open(args['continental_shelf_raster_uri'])
        continental_shelf = \
            continental_shelf_raster.GetRasterBand(1).ReadAsArray()
    else:
        # TODO: replace by vectorize_rasters
        depth_contour = args['depth_contour']
        bathymetry_raster = gdal.Open(args['bathymetry_raster_uri'])
        continental_shelf = bathymetry_raster.GetRasterBand(1).ReadAsArray()
        continental_shelf[continental_shelf >= -depth_contour] =1 #on the shelf
        continental_shelf[continental_shelf  < -depth_contour] =0 #off the shelf
    data_uri['continental_shelf'] = \
        save_intermediate(continental_shelf, prefix +'_'+str(file_count)+ \
            '_continental_shelf.tif')
    file_count += 1
    # Compute the distances on the shelf from the edge
    distance_to_shelf = morphology.distance_transform_edt(continental_shelf)
    data_uri['distance_to_shelf'] = \
        save_intermediate(distance_to_shelf, prefix + '_'+str(file_count) +\
            '_distance_to_shelf.tif')
    file_count += 1
    # Compute the surge along the shore in meters
    # TODO: replace by vectorize_rasters
    shore_shelf_distance = distance_to_shelf * cell_size
    data_uri['shore_shelf_distance'] = \
        save_intermediate(shore_shelf_distance, prefix +'_' +str(file_count) +\
            '_shore_shelf_distance.tif')
    file_count += 1
    # Use percentiles to assign vulnerability index
    R_surge = np.ones_like(shore_shelf_distance) * nodata
    R_surge[shore_points] = 0
    R_surge[exposed_segments] = \
        rank_shore(shore_shelf_distance[exposed_segments], 5) + 1
    # Save the exposed shore segments ranks
    data_uri['exposured_surge_ranks'] = \
        save_intermediate(R_surge, prefix +'_' +str(file_count) +\
            '_exposed_surge_ranks.tif', no_data = nodata)
    # Assign closest exposed shore segments to sheltered ones
    data_uri['surge_potential'] = \
        os.path.join(intermediate_directory, prefix + \
            '_surge_potential.tif')
    assign_sheltered_segments(args['shore_exposure'],
        data_uri['exposured_surge_ranks'], data_uri['surge_potential'])
    # done
    return data_uri

def compute_additional_layer(args):
    """Compute the additional layer the sea level rise index.
    
        Inputs:
            -args['additional_layer_uri']: uri to the additional layer data.
            -args['aoi_uri']: uri to datasource of the area of interest
            -args['shore_uri']: uri to the shoreline dataset (land =1, sea =0)
            -args['cell_size']: integer of the cell size in meters
            -args['intermediate_directory']: uri to the intermediate file
             directory

        Output:
            - Return a dictionary of all the intermediate file URIs.

        Intermediate outputs:
            - rasterized_sea_level_rise.tif:rasterized version of the shapefile
            - shore_FIELD_NAME.tif: raw value along the shore.
            - FIELD_NAME.tif: index along the shore. If all 
                the shore has the same value, assign the moderate index value 3.
            """
    shore_raster = gdal.Open(args['shore_uri'])
    shore_array = shore_raster.GetRasterBand(1).ReadAsArray()
    shore_raster = None
    shore_points = np.where(shore_array == 1)
    cell_size = args['cell_size']
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    prefix = args['prefix'] + 'OPTIONAL_LAYER'
    nodata = -1
    file_count = 0
    # set to save in 'intermediate_directory'
    save_intermediate = \
        set_save_info(intermediate_directory, args['aoi_uri'], cell_size)
    # Dictionary that contains the data's uri indexed by name
    data_uri = {} 
    # Extract the array from the shapefile
    sea_rise_raster = gdal.Open(args['additional_layer_raster_uri'])
    sea_rise_array = sea_rise_raster.GetRasterBand(1).ReadAsArray()
    # Compute sea level rise along the shore
    # TODO: replace by vectorize_rasters
    R_slr = np.ones_like(sea_rise_array) * nodata
    R_slr[shore_points] = sea_rise_array[shore_points]
    data_uri['additional_layer'] = \
        save_intermediate(R_slr, prefix + '_' + str(file_count) + \
        '_optional_layer.tif', no_data = nodata)
    file_count += 1
    # Convert the rise to a rank
    # TODO: replace by vectorize_rasters
    unique = np.unique(R_slr)
    ranks = rank_shore(R_slr[shore_points], 5) + 1
    unique = np.unique(ranks)
    R_slr[shore_points] = ranks
    data_uri['additional_layer'] = \
        save_intermediate(R_slr, prefix + '_' + str(file_count) + \
        '_optional_layer_ranked.tif', no_data = nodata)
    # Done
    return data_uri

# Update the docstring!
def compute_sea_level_rise(args):
    """Compute the sea level rise index as described in the user manual.
    
        Inputs:
            -args['sea_level_rise']: shapefile with the sea level rise data.
            -args['aoi_uri']: uri to datasource of the area of interest
            -args['shore_uri']: uri to the shoreline dataset (land =1, sea =0)
            -args['cell_size']: integer of the cell size in meters
            -args['intermediate_directory']: uri to the intermediate file
             directory

        Output:
            - Return a dictionary of all the intermediate file URIs.

        Intermediate outputs:
            - rasterized_sea_level_rise.tif:rasterized version of the shapefile
            - shore_level_rise.tif: sea level rise along the shore.
            - sea_level_rise.tif: sea level rise index along the shore. If all 
                the shore has the same value, assign the moderate index value 3.
            """
    shore_raster = gdal.Open(args['shore_uri'])
    shore_array = shore_raster.GetRasterBand(1).ReadAsArray()
    shore_raster = None
    shore_points = np.where(shore_array == 1)
    cell_size = args['cell_size']
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    prefix = args['prefix'] + 'SLR'
    nodata = -1
    file_count = 0
    # set to save in 'intermediate_directory'
    save_intermediate = \
        set_save_info(intermediate_directory, args['aoi_uri'], cell_size)
    # Dictionary that contains the data's uri indexed by name
    data_uri = {} 
    # Extract the array from the shapefile
    sea_rise_raster = gdal.Open(args['sea_level_rise_raster_uri'])
    sea_rise_array = sea_rise_raster.GetRasterBand(1).ReadAsArray()
    # Compute sea level rise along the shore
    # TODO: replace by vectorize_rasters
    R_slr = np.ones_like(sea_rise_array) * nodata
    R_slr[shore_points] = sea_rise_array[shore_points]
    data_uri['shore_level_rise'] = \
        save_intermediate(R_slr, prefix + '_' + str(file_count) + \
        '_shore_level_rise.tif', no_data = nodata)
    file_count += 1
    # Convert the rise to a rank
    # TODO: replace by vectorize_rasters
    unique = np.unique(R_slr)
    ranks = rank_shore(R_slr[shore_points], 5) + 1
    unique = np.unique(ranks)
    R_slr[shore_points] = ranks
    data_uri['sea_level_rise'] = \
        save_intermediate(R_slr, prefix + '_' + str(file_count) + \
        '_sea_level_rise.tif', no_data = nodata)
    # Done
    return data_uri

def compute_natural_habitats_vulnerability(args):
    """Compute the natural habitat rank as described in the user manual.
    
        Inputs:
            -args['habitats_csv_uri']: uri to a comma-separated text file
             containing the list of habitats.
            -args['habitats_directory_uri']: uri to the directory where to find
             the habitat shapefiles.
            -args['aoi_uri']: uri to the datasource of the area of interest
            -args['shore_uri']: uri to the shoreline dataset (land =1, sea =0)
            -args['cell_size']: integer cell size in meters
            -args['intermediate_directory']: uri to the directory where 
              intermediate files are stored

        Output:
            -data_uri: a dictionary of all the intermediate file URIs.
            
        Intermediate outputs:
            - For each habitat (habitat name 'ABCD', with id 'X') shapefile:
                - ABCD_X_raster.tif: rasterized shapefile data.
                - ABCD_influence.tif: habitat area of influence. Convolution
                  between the rasterized shape data and a circular kernel which 
                    radius is the habitat's area of influence, TRUNCATED TO
                    CELL_SIZE!!!
                - ABCD_influence_on_shore.tif: habitat influence along the shore
            - habitats_available_data.tif: combined habitat rank along the
                shore using equation 4.4 in the user guide.
            - habitats_missing_data.tif: shore section without habitat data.
            - habitats.tif: shore ranking using habitat and default ranks."""
    shore = gdal.Open(args['shore_uri'])
    shore_array = shore.GetRasterBand(1).ReadAsArray()
    shore_array_shape = shore_array.shape
    shore_points = np.where(shore_array == 1)
    shore_array = None
    shore = None
    cell_size = args['cell_size']
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    prefix = args['prefix'] + 'HAB_'
    # set to save in 'intermediate_directory'
    save_intermediate = set_save_info(intermediate_directory, \
        args['aoi_uri'],cell_size, 0.0)
    # Predefined constants
    NAME                = 0 # Habitat name (string)
    ID                  = 1 # Habitat ID (unique int identifier)
    RANK                = 2 # Habitat rank (int, 1 to 5)
    PROTECTION_DISTANCE = 3 # Habitat protection distance in meters (int)
    FILE_NAME           = 4 # Name of the habitat shapefile
    RASTER_URI          = 5 # Raster URI
    extension = '.shp'      # Shapefile extension to look for
    # Dictionary that contains the data's uri indexed by name
    data_uri = {} 
   
    R = {}  # Dictionary: key=segment coord., value=list of fronting habitats
    prefix_number = 1   # used to keep track of file creation order
    # Process each habitat

    for habitat_data in args['habitat_data'].values():
        # A few shorthand names, for convenience
        habitat_name = habitat_data[NAME]
        habitat_file_name = habitat_name.replace(' ', '_')
        habitat_id = int(habitat_data[ID])
        habitat_rank = int(habitat_data[RANK])
        habitat_distance = int(habitat_data[PROTECTION_DISTANCE])
        habitat_uri = habitat_data[RASTER_URI]
        habitat_raster = gdal.Open(habitat_uri)
        habitat_band = habitat_raster.GetRasterBand(1)
        habitat_array = habitat_band.ReadAsArray()
        prefix_number += 1
        # Create a kernel to detect where the habitat influences the shore
        kernel = disc_kernel(habitat_distance / cell_size)
        # Area of influence by convolving the kernel with the habitat raster
        influenced_area = \
            sp.signal.convolve2d(habitat_array, kernel, mode='same')
        data_uri[habitat_file_name + '_influence'] = \
        save_intermediate(influenced_area, \
            prefix + str(prefix_number).zfill(2) + '_' + \
            habitat_file_name +'_influence.tif', no_data = 0.)
        prefix_number += 1
        # Compute the influence of the habitat along the shore
        # TODO: replace by vectorize_rasters
        shore_influence = np.zeros_like(influenced_area)
        shore_influence[shore_points] = influenced_area[shore_points]
        data_uri[habitat_file_name + '_influence_on_shore'] = \
        save_intermediate(shore_influence, \
            prefix + str(prefix_number).zfill(2) + '_' + \
            habitat_file_name + '_influence_on_shore.tif', no_data = 0.)
        prefix_number += 1
        # Mark all the shore segments under the iinfluence of this habitat
        [I, J] = np.where(shore_influence > 0)
        for point in zip(I,J):
            if point in R: 
                R[point] = \
                np.concatenate([R[point], np.array([habitat_rank])])
            else:
                R[point] = np.array([habitat_rank])

    # TODO: replace by vectorize_rasters
    shore_data = np.ones(shore_array_shape) * -1 # Will hold known ranking data
    shore_data[shore_points] = 0
    # For each point influenced by a natural habitat
    for point in R:
        # Compute the vulnerability index
        R[point] = combined_rank(R[point])
        # Fill the array with shore data
        shore_data[point[0], point[1]] = R[point]
        
    data_uri['habitats_available_data'] = \
        save_intermediate(shore_data, \
        prefix + str(prefix_number).zfill(2) + '_' + \
        'habitats_available_data.tif', no_data = 0.)
    prefix_number += 1
    # Default shore vulnerability index
    # TODO: replace by vectorize_rasters
    default_data = np.ones_like(shore_data) * -1
    default_data[np.where(shore_data == 0)] = 5
    data_uri['habitats_missing_data'] = \
        save_intermediate(default_data, \
        prefix + str(prefix_number).zfill(2) + '_' + \
        'habitats_missing_data.tif', no_data = -1.)
    # Actual shore vulnerability index
    # TODO: replace by vectorize_rasters
    R_hab = np.ones_like(shore_data) * -1
    R_hab[shore_points] = \
        shore_data[shore_points] + default_data[shore_points]
    data_uri['natural_habitats'] = save_intermediate(R_hab, \
    args['prefix'] + 'natural_habitats.tif', no_data = -1.)
    return data_uri

# TODO: update docstring
def compute_geomorphology(args):
    """ Compute the geomorphology index as is described in InVEST's user guide.
    
        Inputs:
            -args['geomorphology']: shapefile of the gemorphology ranking 
             along the coastline.
            -args['aoi_uri']: uri to the region of interest (shapefile).
            -args['shore_uri']: uri to a the shoreline dataset 
                (land = 1, sea = 0).
            -args['cell_size']: integer cell size of in meters.
            -args['spread_radius']: integer value of the area over which to
              spread (smear) the coastline. 
              If the coastline from the geomorphology doesn't 
              match the land polygon's shoreline, we can increase the overlap
              by 'spreading' the data from the geomorphology over a wider area.
              The wider the spread, the more ranking data overlaps with the 
              coast. The spread is a convolution between the geomorphology 
              ranking data and a 2D gaussian kernel of area
              (2*spread_radius+1)^2. A radius of zero reduces the kernel to the
              scalar 1, which means no spread at all.              
            - args['intermediate_directory']: uri to the directory where 
              intermediate files are stored

        Output:
            - data_uri: a dictionary of all the intermediate file URIs.
            
        Detailed output:
            - aoi_reprojected_morphology.shp: the original geomorphology data
                reprojected to the AOI's projection.
            - geomorphology_rank.tif: the shore ranking as stored in the
                shapefile, rasterized within the aoi using cell_size.
            - spread_rank.tif: shore ranking smoothen by convolution of 
                geomorphology_rank.
            - geomorphology_coast.tif: rasterized coast (encoded as 1s) 
                extracted from geomorphology data.

            - spread_coast.tif: smoothed shore obtained by convolution of
                geomorphology_coast. Can't be used as is as a quotient in a
                division (see normalized_spread_rank), because of 0 values.
            - adjusted_spread_coast.tif: same as spread_coast.tif, where areas
                with zeros set to one to avoid division-by-zero as a quotient.
            - available_coastal_data.tif: coastal information that is available
                given the data.
            - missing_coastal_data.tif: portions of the shore for which rank
                information isn't available from the data.
            - normalized_spread_rank.tif: raster file of 
                spread_rank / spread_coast. The result is floating point values
                between 1 to 5. To be integer, they need to be approximated.
            - approximated_spread_rank.tif: approximation of
              normalized_spread_rank to be integers between 1 and 5.
            - geomorphology.tif: combination of rank information from
              normalized_spread_rank, completed with missing coastal
              information (from missing_coastal data) set to a moderate level
              of 3."""
    cell_size = args['cell_size']
    spread_radius = args['spread_radius']
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    prefix = args['prefix'] + 'GEO_'
    # set to save in 'intermediate_directory'
    save_intermediate = \
    set_save_info(intermediate_directory, args['aoi_uri'], cell_size)
    # Dictionary that contains the data's uri indexed by name
    data_uri = {} 
    MODERATE_RANK = 3
    shore_raster = gdal.Open(args['shore_uri'])
    shore_array = shore_raster.GetRasterBand(1).ReadAsArray()
    geo_raster = gdal.Open(args['geomorphology_raster_uri'])
    geo_array = geo_raster.GetRasterBand(1).ReadAsArray()
    # Ensure that 'field_name' exist in the file 
    #assert(has_field(field_name, geomorphology))
    # As the geomorphology coast may not perfectly overlap with 'shore',
    # we have to find a way to have rank values along every shore point.
    # Solution: 
    #   1)-spread the shore ranks with a convolution 
    #   2)-normalize by the spread (geomorphology shore set to 1,then convolved)
    # Create convolution kernel + apply it
    # avoid / by zero if R == 0
    R = (spread_radius/cell_size) if spread_radius >= cell_size else 1. 
    kernel = np.exp(-disc_kernel(R)/(2.*(R/3.)**2.))
    # 1)-Convolve the geomorphology ranking with the kernel
    spread_rank = sp.signal.convolve2d(geo_array, kernel,mode='same')
    data_uri['spread_rank'] = save_intermediate(spread_rank, \
    prefix + "01_spread_rank.tif", no_data=0.)
    # Convolve the geomorphology coast with the kernel
    geo_coast = (geo_array > 0).astype(int)
    data_uri['geomorphology_coast'] = save_intermediate(geo_coast, \
    prefix + "02_geomorphology_coast.tif", no_data = 0.)
    spread_coast = sp.signal.convolve2d(geo_coast, kernel, mode='same')
    data_uri['spread_coast'] = save_intermediate(spread_coast, \
    prefix + "03_spread_coast.tif", no_data = 0.)
    # Create an array where the spread coast is normalized to 1, and 0 at sea
    norm_coast = np.copy(spread_coast)
    norm_coast[norm_coast > 0.] = 1.
    available_coast = norm_coast * shore_array
    data_uri['available_coastal_data'] = save_intermediate(available_coast, \
    prefix+"04_available_coastal_data.tif", no_data = 0.)
    missing_coast = shore_array - available_coast
    data_uri['missing_coastal_data'] = save_intermediate(missing_coast, \
    prefix + "05_missing_coastal_data.tif", no_data = 0.)
    # 2)-Normalize the spread ranking by the spread coast
    # TODO: replace by vectorize_rasters
    spread_coast[spread_coast == 0.] = 1.     # avoid division by zero
    data_uri['adjusted_spread_coast'] = save_intermediate(spread_coast, \
    prefix + "06_adjusted_spread_coast.tif", no_data = 0.)
    norm_spread_rank = spread_rank / spread_coast
    data_uri['normalized_spread_rank'] = save_intermediate(norm_spread_rank, \
    prefix + "07_normalized_spread_rank.tif", no_data = 0.)
    # Approximate the rank to be between 1 to 5
    # TODO: replace by vectorize_rasters
    approximated_rank = (norm_spread_rank + 0.5).astype(int)
    data_uri['approximated_spread_rank']=save_intermediate(approximated_rank,\
    prefix + "08_approximated_spread_rank.tif", no_data = 0.)
    # Available data is geomorphology rank along the shore
    available_rank = approximated_rank * shore_array
    data_uri['available_rank_data'] = save_intermediate(available_rank, \
    prefix + "09_available_rank_data.tif", no_data = 0.)
    # Geomorphology index is available data completed with missing data
    # TODO: replace by vectorize_rasters
    R_geomorphology = available_rank + (missing_coast * MODERATE_RANK)
    # Save the result
    data_uri['geomorphology'] = save_intermediate(R_geomorphology, \
    args['prefix'] + "geomorphology.tif", no_data = 0.0)
    return data_uri

def compute_relief_rank(args):
    """ Compute the relief index as is described in InVEST's user guide.
    
        Inputs:
            - args['relief_uri']: uri to an elevation dataset.
            - args['aoi_uri']: uri to the datasource of the region of interest.
            - args['landmass_uri']: uri to the landmass datasource where land is
              1 and sea is 0.
            - args['spread_radius']: if the coastline from the geomorphology i
                doesn't match the land polygon's shoreline, we can increase the 
                overlap by 'spreading' the data from the geomorphology over a 
                wider area. The wider the spread, the more ranking data overlaps
                with the coast. The spread is a convolution between the 
                geomorphology ranking data and a 2D gaussian kernel of area
                (2*spread_radius+1)^2. A radius of zero reduces the kernel to 
                the scalar 1, which means no spread at all.              
            - args['spread_radius']: how much the shore coast is spread to match
                the relief's coast.
            - args['shore']: the shoreline (land = 1, sea = 0).
            - args['cell_size']: granularity of the rasterization.
            - args['intermediate_directory']: where intermediate files are
                stored
            
        Output:
            - Return R_relief as described in the user manual.
            - A rastrer file called relief.tif"""
    spread_radius = args['spread_radius']
    nodata = -1
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    prefix = args['prefix'] + 'RELIEF'
    # set to save in 'intermediate_directory'
    save_intermediate = \
    set_save_info(intermediate_directory, args['aoi_uri'], args['cell_size'])
    # Dictionary that contains the data's uri indexed by name
    data_uri = {} 
    # Get the land elevation and land coverage from relief. Sea elevation is 0
    land_elevation_raster = None
    land_elevation_raster = gdal.Open(args['bathymetry_raster_uri'])
    band = land_elevation_raster.GetRasterBand(1)
    land_elevation = band.ReadAsArray()
    land_elevation_nodata = band.GetNoDataValue()
    land_elevation[land_elevation == land_elevation_nodata] = 0
    land_elevation[land_elevation <0] = 0   # Set sea elevation to 0
    save_intermediate(land_elevation, prefix + '_01_land_elevation.tif')
    # Compute the aoi's raster array
    aoi_raster = gdal.Open(args['aoi_raster_uri'])
    aoi_array = aoi_raster.GetRasterBand(1).ReadAsArray()
    aoi_raster = None
    # Create convolution kernel + apply it
    kernel = disc_kernel(args['elevation_averaging_radius'] /args['cell_size'])
    # Convolve the land elevation with the kernel
    elevation_average = sp.signal.convolve2d(land_elevation, kernel,mode='same')
    data_uri['elevation_average'] = \
        save_intermediate(elevation_average, prefix+'_02_elevation_average.tif')
    # Convolve the land coverage with the kernel
    # TODO: replace by vectorize_rasters
    land_raster= gdal.Open(args['landmass_raster_uri'])
    land_coverage = land_raster.GetRasterBand(1).ReadAsArray()
    land_proportion =sp.signal.convolve2d(land_coverage, kernel, mode='same')
    land_proportion[land_proportion == 0] = 1   # Avoid division by zero
    data_uri['land_proportion'] = \
        save_intermediate(land_proportion, prefix + '_03_land_proportion.tif')
    # Compute average land height
    data_uri['average_land_height'] = \
    os.path.join(args['intermediate_directory'], args['subdirectory'], \
    prefix+'_08_average_land_height.tif')
    raster_utils.vectorize_datasets([data_uri['elevation_average'], \
    data_uri['land_proportion']], lambda x,y: x/y, \
    data_uri['average_land_height'], gdal.GDT_Float32, -1., args['cell_size'], \
    "intersection", aoi_uri = args['aoi_uri'])
    average_land_height_raster = gdal.Open(data_uri['average_land_height'])
    average_land_height = \
    average_land_height_raster.GetRasterBand(1).ReadAsArray()
    # Per-segment average of the shore height along the coast
    # TODO: replace by vectorize_rastersi
    average_relief = np.ones_like(average_land_height) * nodata
    data_uri['average_relief'] = \
        save_intermediate(average_relief, prefix + '_04_average_relief.tif')
    # Relief index: percentile -(round)-> integer -(+1)-> index
    # TODO: replace by vectorize_rasters
    shore = gdal.Open(args['shore_uri'])
    shore_array = shore.GetRasterBand(1).ReadAsArray()
    shore_points = np.where(shore_array == 1)
    shore = None
    R_relief = average_relief
    R_relief[shore_points] = \
        rank_shore(-average_land_height[shore_points], 5) + 1
    # Save result
    data_uri['relief'] = \
        save_intermediate(R_relief, prefix + '_05_relief.tif', no_data = nodata)
    return data_uri

def compute_wind_exposure(args):
    """ Compute the wind exposure for every shore segment as in equation 4.5
    
        Inputs:
            - args['climatic_forcing_uri']: uri to the wind information
              datasource
            - args['aoi_uri']: uri to the area of interest datasource
            - args['fetch_distances']: a dictionary of (point, list) pairs
              where point is a tuple of integer (row, col) coordinates and 
              list is a maximal fetch distance in meters for each fetch sector.
            - args['fetch_depths']: same dictionary as fetch_distances, but
              list is a maximal fetch depth in meters for each fetch sector.
            - args['cell_size']: granularity of the rasterization.
            - args['intermediate_directory']:where intermediate files are stored
            - args['prefix']: string 
            
        Outputs:
            - data_uri: dictionary of the uri of all the files created in the
              function execution
        File description:
            - REI.tif: combined REI value of the wind exposure index for all
              sectors along the shore.
        
            - For each equiangular fetch sector n:
                - REI_n.tif: per-sector REI value (U_n * P_n * F_n)."""
    nodata = 0
    sector_count = SECTOR_COUNT
    cell_size = args['cell_size']
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    prefix = args['prefix']
    # set to save in 'intermediate_directory'
    save_intermediate = \
        set_save_info(intermediate_directory, args['aoi_uri'], cell_size)
    # Dictionary that contains the data's uri indexed by name
    data_uri = {} 
    # Variable initializations
    sector_range = range(sector_count)
    sectors_deg = np.array(sector_range, dtype=int) *360 / sector_count
    basename = prefix + 'WIND'
    f_count = 0     # File counter
    extension = '.tif'  # Filename extension
    path = intermediate_directory
    # Compute the REI for each sector
    REI_uri_list = []
    for sector in range(sector_count):
        REI_uri = os.path.join(intermediate_directory, basename + '_REI_' + \
        str(sectors_deg[sector]) + extension)
        # Shore_uri is used as a mask to leave 0s in the background
        input_uri_list = [args['REI_V'][sector], args['REI_PCT'][sector], \
        args['fetch_distance_uris'][sector], args['shore_uri']]
        raster_utils.vectorize_datasets(input_uri_list, \
        lambda x, y, z, mask: x*y*z if mask > 0 else nodata,\
        REI_uri, gdal.GDT_Float32, nodata, args['cell_size'], 'intersection')
        REI_uri_list.append(REI_uri)
    # Sum the result
    REI_uri = os.path.join(intermediate_directory, basename +'_REI' +extension)
    raster_utils.vectorize_datasets(REI_uri_list, lambda *x: sum(x), \
    REI_uri, gdal.GDT_Float32, nodata, args['cell_size'], 'intersection', \
    aoi_uri = args['aoi_uri'])
    # Use percentiles to assign vulnerability index
    head, tail = os.path.split(args['shore_uri'])
    root, ext = os.path.splitext(tail)
    wind_exposure_uri = \
    os.path.join(intermediate_directory, prefix + 'wind_exposure.tif')
    raster_utils.vectorize_datasets([args['shore_uri'], REI_uri], \
    lambda x, y: x*y, wind_exposure_uri, gdal.GDT_Float32, nodata, \
    args['cell_size'], 'intersection')
    shore_raster = gdal.Open(wind_exposure_uri, gdal.GA_Update)
    shore_array = shore_raster.GetRasterBand(1).ReadAsArray()
    shore_points = np.where(shore_array != nodata)
    shore_array[shore_points] = rank_shore(shore_array[shore_points], 5) + 1
    data_uri['wind_exposure'] = wind_exposure_uri
    # done
    return data_uri

def assign_sheltered_segments(exposure_raster_uri, raster_uri, output_raster_uri):
    """ Propagate values from 'sources' across a surface defined by 'mask' in a
        breadth-first-search manner.
        
        Inputs:
            -exposure_raster_uri: URI to the GDAL dataset that we want to process
            -mask: a numpy array where 1s define the area across which we want
                to propagate the values defined in 'sources'.
            -sources: a tuple as is returned by numpy.where(...) of coordinates
                of where to pick values in 'raster_uri' (a source). They are the
                values we want to propagate across the area defined by 'mask'.
            -output_raster_uri: URI to the GDAL dataset where we want to save
            the array once the values from source are propagated.

        Returns: nothing.

        The algorithm tries to spread the values pointed by 'sources' to every
        of the 8 immediately adjascent pixels where mask==1. Each source point
        is processed in sequence to ensure that values are propagated from the
        closest source point.
        If a connected component of 1s in 'mask' does not contain any source, 
        its value remains unchanged in the output raster."""
    def find_exposure_boundaries(exposure_array, no_data):
        """Finds sheltered shore segments bordering exposed ones."""
        mask = np.where(exposure_array != no_data)
        exposure_array[exposure_array == no_data] = 0
        kernel = np.array([[1, 1, 1], [1, -9, 1], [1, 1, 1]])

        convolved_shore = sp.signal.convolve2d(exposure_array, kernel, mode='same')
        boundary_indices = np.where(convolved_shore[mask] > 0)[0]

        return (mask[0][boundary_indices], mask[1][boundary_indices])
    #LOGGER.info('Assigning sheltered segment ranks using exposed segments.')
    # Extract the mask, i.e. the shorteline over which to propagate the values
    exposure_raster = gdal.Open(exposure_raster_uri)
    band = exposure_raster.GetRasterBand(1)
    no_data = band.GetNoDataValue()
    exposure_array = band.ReadAsArray()

    mask = np.where(exposure_array == 0)

    sources = find_exposure_boundaries(exposure_array, no_data)
    if not sources:
        return
    raster = gdal.Open(raster_uri)
    nodata = raster.GetRasterBand(1).GetNoDataValue()
    array = np.copy(raster.GetRasterBand(1).ReadAsArray())
    
    # Compute the values that should be propagated
    for n in range(sources[0].size):
        i = sources[0][n]
        j = sources[1][n]
        # Slice a 3x3 array around the point
        x = np.array([i-1, i, i+1])        
        y = np.array([j-1, j, j+1])        
        neighborhood = np.vstack(np.meshgrid(x, y)).reshape(2, -1)
        neighborhood = (neighborhood[0], neighborhood[1])
        # Extract points where values should be propagated
        # If the cell is bordered by exposed segments with different ranks, 
        # take the highest vulnerability
        value = np.amax(array[neighborhood])
        # Assign the values to the array        
        array[i, j] = value
    
    mask_array = np.zeros_like(array)
    mask_array[mask] = 1    
    mask_array[sources] = 0 # Don't need to propagate here 
    
    # Stop when there are no more pixels sources to propagate across the mask
    # However, there could be remaining 1s in mask_array if some cells are
    # connected to source-free components (components with no source on them).
    while sources[0].size > 0:
        new_sources = () # sources to propagate on the next round    
        new_point_count = 0
        for n in range(sources[0].size):
            i = sources[0][n]
            j = sources[1][n]
            value = array[i, j] # This is the value to propagate        
            # Slice a 3x3 array around the point
            x = np.array([i-1, i, i+1])        
            y = np.array([j-1, j, j+1])        
            neighborhood = np.vstack(np.meshgrid(x, y)).reshape(2, -1)
            neighborhood = (neighborhood[0], neighborhood[1])
            # Extract points where values should be propagated
            point_indices = np.where(mask_array[neighborhood] == 1)[0]
            new_point_count += point_indices.size            
            points = (neighborhood[0][point_indices], neighborhood[1][point_indices])      
            # Assign the values to the array        
            array[points] = value
            # We're done with these points, remove them from mask
            mask_array[points] = 0
            # These are the new values to propagate next round
            if not new_sources:
                new_sources = points
            else:        
                first = np.concatenate([new_sources[0], points[0]])       
                second = np.concatenate([new_sources[1], points[1]])       
                new_sources = (first, second)
        # Update sources with the new ones we just found
        sources = new_sources

    # If there are remaining 1s in mask_array, assign the value of the closest
    # exposed shore segment
    exposed_segments = np.where(exposure_array == 1)
    unassigned_shore = np.where(mask_array == 1)
    # Initialize the KD tree with exposed shore segments
    tree = spatial.KDTree(zip(exposed_segments[0], exposed_segments[1]))
    # Find the exposed segments closest to the unassigned shore
    L_s, exposed_indices = \
        tree.query(zip(unassigned_shore[0], unassigned_shore[1]))
    # Fill the unassigned segments with the values from the closest exposed 
    # shore segment:
    # tree.data[exposed_indices]: coordinates of the closest exposed segments
    # zip(*tree.data[...]): coordinates formatted as in np.where(...)
    # array[zip(...)]: values of the closest exposed shore segments, ordered as
    # in unassigned_shore
    array[unassigned_shore] = array[zip(*tree.data[exposed_indices])]

    # Save values to the output raster
    new_raster = \
        raster_utils.new_raster_from_base(raster, output_raster_uri, \
    	'GTIFF', nodata, gdal.GDT_Float32)
    new_raster.GetRasterBand(1).WriteArray(array)
    return

def compute_wave_exposure(args):
    """ Compute the wind exposure for every shore segment
    
        Inputs:
            - args['climatic_forcing_uri']: uri to wave datasource
            - args['aoi_uri']: uri to area of interest datasource
            - args['fetch_distances']: a dictionary of (point, list) pairs
              where point is a tuple of integer (row, col) coordinates and 
              list is a maximal fetch distance in meters for each fetch sector.
            - args['fetch_depths']: same dictionary as fetch_distances, but
              list is a maximal fetch depth in meters for each fetch sector.
            - args['cell_size']: cell size in meters (integer)
            - args['H_threshold']: threshold (double) for the H function (eq. 7)
            - args['intermediate_directory']: uri to the directory that
              contains the intermediate files
            
        Outputs:
            - data_uri: dictionary of the uri of all the files created in the
              function execution
        Detail of files:
            - A file called wave.tif that contains the wind exposure index along
              the shore.
            - For each equiangular fetch sector k:
                - F_k.tif: per-sector fetch value (see eq. 6).
                - H_k.tif: per-sector H value (see eq. 7)
                - E_o_k.tif: per-sector average oceanic wave power (eq. 6)
                - E_l_k.tif: per-sector average wind-generated wave power (eq.9)
                - E_w_k.tif: per-sector wave power (eq.5)
                - E_w.tif: combined wave power."""
    shore = gdal.Open(args['shore_uri'])
    shore_array = shore.GetRasterBand(1).ReadAsArray()
    shore_points = np.where(shore_array > 0.)
    raster_size = shore_array.shape
    shore_array = None

    nodata = 0
    sector_count = SECTOR_COUNT
    cell_size = args['cell_size']
    H_threshold = args['H_threshold']
    intermediate_directory = \
        os.path.join(args['intermediate_directory'], args['subdirectory'])
    # set to save in 'intermediate_directory'
    save_intermediate = set_save_info(intermediate_directory, \
        args['aoi_uri'], cell_size)
    # Dictionary that contains the data's uri indexed by name
    data_uri = {} 
    # Variable initializations
    sector_range = range(sector_count)
    sectors_deg = np.array(sector_range, dtype=int) *360 / sector_count
    prefix = args['prefix'] + 'WAVE'
    f_count = 0     # File counter
    extension = '.tif'  # Filename extension

    # E_o needs the step function H. This function initializes E_o with the 
    # function H
    def set_H_for_E_o(H):
        def E_o(fetch, WavP, WavPPCT, mask):
            if mask == 0.:
                return -1.
            return max(H(fetch) * WavP * WavPPCT, 0)
        return E_o
        
    # E_o needs the function H. Set H first, and use it to initialize E_o
    # Set H threshold, in km
    H = set_H_threshold(H_threshold)
    E_o = set_H_for_E_o(H)

    # Compute the oceanic wave energy for each sector
    Eo_uri_list = []
    for sector in range(sector_count):
        Eo_uri = os.path.join(intermediate_directory, prefix + '_E_o_' + \
        str(sectors_deg[sector]) + extension)
        # Shore_uri is used as a mask to leave 0s in the background
        input_uri_list = [args['fetch_distance_uris'][sector], \
        args['WavP'][sector], args['WavPPCT'][sector], args['shore_uri']]
        raster_utils.vectorize_datasets(input_uri_list, E_o, \
        Eo_uri, gdal.GDT_Float32, -1., args['cell_size'], 'intersection')
        Eo_uri_list.append(Eo_uri)
    # Sum the result
    Eo_uri = os.path.join(intermediate_directory, prefix +'_E_o' +extension)
    raster_utils.vectorize_datasets(Eo_uri_list, lambda *x: sum(x), \
    Eo_uri, gdal.GDT_Float32, -1.*len(Eo_uri_list), args['cell_size'], \
    'intersection', aoi_uri = args['aoi_uri'])
    data_uri['E_o'] = Eo_uri
    
    def compute_wave_height(Un, Fn, dn, mask):
        if mask == 0.:
            return -1.
        if Un < 1.:
            LOGGER.warning('Wind speed <= 0 is set to 1.')
            Un = 1.
        dn = -dn
        ds = 9.81*dn/Un**2
        Fs = 9.81*Fn/Un**2
        A = np.tanh(0.343*ds**1.14)
        B = np.tanh(4.41e-4*Fs**0.79/A)
        H_n = 0.24*Un**2/9.81*(A*B)**0.572
        return H_n

    # Compute wave height for each sector
    wave_height_list = []
    for sector in range(sector_count):
        uri = os.path.join(intermediate_directory, \
        prefix + '_wave_height_' + str(sectors_deg[sector]) + extension)
        # Shore_uri is used as a mask
        input_uri_list = [args['REI_V'][sector], \
        args['fetch_distance_uris'][sector], 
        args['fetch_depth_uris'][sector], args['shore_uri']]
        raster_utils.vectorize_datasets(input_uri_list, compute_wave_height, \
        uri, gdal.GDT_Float32, -1., args['cell_size'], 'intersection')
        wave_height_list.append(uri)
    args['wave_heights'] = wave_height_list

    def compute_wave_period(Un, Fn, dn, mask):
        if mask == 0.:
            return -1.
        if Un < 1.:
            Un = 1.
        dn = -dn
        ds = 9.81*dn/Un**2
        Fs = 9.81*Fn/Un**2
        A = np.tanh(0.1*ds**2.01)
        B = np.tanh(2.77e-7*Fs**1.45/A)
        return 7.69*Un/9.81*(A*B)**0.187

    # Compute wave period for each sector
    wave_period_list = []
    for sector in range(sector_count):
        uri = os.path.join(intermediate_directory, prefix + \
        '_wave_period_' + str(sectors_deg[sector]) + extension)
        # Shore_uri is used as a mask
        input_uri_list = [args['REI_V'][sector], \
        args['fetch_distance_uris'][sector], 
        args['fetch_depth_uris'][sector], args['shore_uri']]
        raster_utils.vectorize_datasets(input_uri_list, compute_wave_period, \
        uri, gdal.GDT_Float32, -1., args['cell_size'], 'intersection')
        wave_period_list.append(uri)
    args['wave_periods'] = wave_period_list

    def E_l(wave_height, wave_period, REI_PCT, mask):
        if mask == 0:
            return -1.
        return 0.5 * wave_height**2 * wave_period * REI_PCT

    # Compute local wave power for each sector
    El_uri_list = []
    for sector in range(sector_count):
        uri = os.path.join(intermediate_directory, prefix + \
        '_E_l_' + str(sectors_deg[sector]) + extension)
        # Shore_uri is used as a mask
        input_uri_list = [wave_height_list[sector], wave_period_list[sector], \
        args['REI_PCT'][sector], args['shore_uri']]
        raster_utils.vectorize_datasets(input_uri_list, E_l, \
        uri, gdal.GDT_Float32, -1., args['cell_size'], 'intersection')
        El_uri_list.append(uri)

    # Sum the result
    El_uri = os.path.join(intermediate_directory, prefix +'_E_l' + extension)
    raster_utils.vectorize_datasets(El_uri_list, lambda *x: sum(x), \
    El_uri, gdal.GDT_Float32, -1.*len(El_uri_list), args['cell_size'], \
    'intersection', aoi_uri = args['aoi_uri'])
    data_uri['E_l'] = El_uri
    # Take the maximum of the two
    Ew_uri = os.path.join(intermediate_directory, prefix +'_E_w.tif')
    raster_utils.vectorize_datasets([Eo_uri, El_uri, args['shore_uri']], \
    lambda x, y, z: max(x, y) if z else -1., Ew_uri, gdal.GDT_Float32, -1., \
    args['cell_size'], 'intersection', aoi_uri = args['aoi_uri'])
    data_uri['E_w'] = Ew_uri
    # Use percentiles to assign vulnerability index
    ranked_Ew_uri = \
    os.path.join(intermediate_directory, prefix +'_E_w_ranked.tif')
    shutil.copy(Ew_uri, ranked_Ew_uri)
    shore_raster = gdal.Open(ranked_Ew_uri, gdal.GA_Update)
    shore_array = shore_raster.GetRasterBand(1).ReadAsArray()
    shore_points = np.where(shore_array != -1.)
    shore_array[shore_points] = rank_shore(shore_array[shore_points], 5) + 1
    shore_raster.GetRasterBand(1).WriteArray(shore_array)
    data_uri['wave_exposure'] = ranked_Ew_uri
    # done
    return data_uri

# Todo: Once this piece of code works, rename it and use it in rank_shore
def get_jenks_breaks_fast( dataList, numClass ):
    """ Script borrowed from Daniel Lewis that computes Jenks breaks.
    The original script can be found here:
    http://danieljlewis.org/2010/06/07/jenks-natural-breaks-algorithm-in-python/
    
    Inputs:
        -dataList: linear numpy array used to determine the breaks
        -numClass: number of classes

    Returns a list of numClass values of the bin boundaries

    Note: the algorithm breaks down if there are less than numClass different
    values in dataList. It is important to test if numpy.unique(dataList) has
    more than numClass values.
    """
    dataList = sorted(dataList)
    data_size = len(dataList)
    
    mat1 = np.zeros((data_size+1, numClass+1))
    mat2 = np.zeros_like(mat1)
                    
    mat1[1,1:numClass+1] = 1
    mat2[1,1:numClass+1] = 0
    mat2[2:data_size+1,1:numClass+1] = float('inf')
                            
    v = 0.0
    l_range = range(2,data_size+1)
    for l in l_range:
        s1 = 0.0
        s2 = 0.0
        w = 0.0
        m_range = range(1,l+1)
        for m in m_range:
            i3 = l - m + 1
            val = float(dataList[i3-1])
            s2 += val**2
            s1 += val
            w += 1
            v = s2 - s1**2 / w
            i4 = i3 - 1
            if i4 != 0:
                j_range = range(2,numClass+1)
                for j in j_range:
                    C = v + mat2[i4,j - 1]
                    if mat2[l,j] >= C:
                        mat1[l,j] = i3
                        mat2[l,j] = C
        mat1[l,1] = 1
        mat2[l,1] = v
    k = data_size
    kclass = []
    for i in range(0,numClass+1):
        kclass.append(0)
    kclass[numClass] = float(dataList[-1])
    countNum = numClass
    while countNum >= 2:
        id = int((mat1[k][countNum])-2)
        kclass[countNum - 1] = dataList[id]
        k = int((mat1[k][countNum] - 1))
        countNum -= 1
    # Slight re-work of kclass so that it's compatible with numpy.digitize:
    # So far, kclass's first bin is the interval [0, x0] where x0 is the 
    # smallest element in dataList. Since digitize treats the interval as the
    # semi-open interval [0, x0), there will never be any value in the first
    # bin. Instead, the first interval should be [x0, x1), and the last
    # interval [xn, C), where xn is the largest value in dataList, and C > xn
    # What we have to do is left-shift every value in kclass by 1 position, and
    # add a value C at the end, such as xn + 1:
    kclass[:-1] = kclass[1:]
    kclass[-1] = max(kclass) + 1
    return kclass

# Todo: Optimize this code!!!! It's incredibly inefficient!
def get_jenks_breaks( dataList, numClass ):
    """ Script borrowed from Daniel Lewis that computes Jenks breaks.
    Tthe original script can be found here:
    http://danieljlewis.org/2010/06/07/jenks-natural-breaks-algorithm-in-python/
    
    Inputs:
        -dataList: linear numpy array used to determine the breaks
        -numClass: number of classes

    Returns a list of numClass values of the bin boundaries

    Note: the algorithm breaks down if there are less than numClass different
    values in dataList. It is important to test if numpy.unique(dataList) has
    more than numClass values.
    """
    kclass2 = get_jenks_breaks_fast(dataList, numClass)
    # Changed this line to sorted so that dataList that is passed in the
    # arguments is unchanged.
    dataList = sorted(dataList)

    mat1 = []
    for i in range(0,len(dataList)+1):
        temp = []
        for j in range(0,numClass+1):
            temp.append(0)
        mat1.append(temp)
    
    mat2 = []
    for i in range(0,len(dataList)+1):
        temp = []
        for j in range(0,numClass+1):
            temp.append(0)
        mat2.append(temp)
                    
    for i in range(1,numClass+1):
        mat1[1][i] = 1
        mat2[1][i] = 0
        for j in range(2,len(dataList)+1):
            mat2[j][i] = float('inf')
                            
    v = 0.0
    for l in range(2,len(dataList)+1):
        s1 = 0.0
        s2 = 0.0
        w = 0.0
        for m in range(1,l+1):
            i3 = l - m + 1
            val = float(dataList[i3-1])
            s2 += val * val
            s1 += val
            w += 1
            v = s2 - (s1 * s1) / w
            i4 = i3 - 1
            if i4 != 0:
                for j in range(2,numClass+1):
                    if mat2[l][j] >= (v + mat2[i4][j - 1]):
                        mat1[l][j] = i3
                        mat2[l][j] = v + mat2[i4][j-1]
        mat1[l][1] = 1
        mat2[l][1] = v
    k = len(dataList)
    kclass = []
    for i in range(0,numClass+1):
        kclass.append(0)
    kclass[numClass] = float(dataList[len(dataList)-1])
    countNum = numClass
    while countNum >= 2:
        #print "rank = " + str(mat1[k][countNum])
        id = int((mat1[k][countNum])-2)
        #print "val = " + str(dataList[id])
        kclass[countNum - 1] = dataList[id]
        k = int((mat1[k][countNum] - 1))
        countNum -= 1
    # Slight re-work of kclass so that it's compatible with numpy.digitize:
    # So far, kclass's first bin is the interval [0, x0] where x0 is the 
    # smallest element in dataList. Since digitize treats the interval as the
    # semi-open interval [0, x0), there will never be any value in the first
    # bin. Instead, the first interval should be [x0, x1), and the last
    # interval [xn, C), where xn is the largest value in dataList, and C > xn
    # What we have to do is left-shift every value in kclass by 1 position, and
    # add a value C at the end, such as xn + 1:
    kclass[:-1] = kclass[1:]
    kclass[-1] = max(kclass) + 1

    # Compute error between normal and fast algorithms:
    assert(len(kclass) == len(kclass2))
    error = 0.0
    for i in range(len(kclass)):
        error += abs(kclass[i] - kclass2[i])
    if error > 1.0e-10:
        print('classification error', error)
        assert(error < 1.0e-10)

    return kclass

def rank_by_quantiles(X, bin_count):
    """ Tries to evenly distribute elements in X among 'bin_count' bins.
        If the boundary of a bin falls within a group of elements with the same
        value, all these elements will be included in that bin.
        Inputs:
            -X: a 1D numpy array of the elements to bin
            -bin_count: the number of bins
            
        Returns the bin boundaries ready to be used by numpy.digitize"""
    I = np.argsort(X)
    bin_boundaries = [X[I[X.size/bin_count*n]] for n in range(bin_count)]
    bin_boundaries.append(X[I[-1]] + 1)
    return bin_boundaries

def rank_shore(X, bin_count):
    """ Assign a rank based on natural breaks (Jenks natural breaks for now).
    
        Inputs:
            - X: a numpy array with the lements to be ranked
            - bins: the number of ranks (integer)
            
        Outputs:
            - output: a numpy array with rankings in the interval 
                [0, bin_count-1] that correspond to the elements of X 
                (rank of X[i] == outputs[i])."""
    Y = np.copy(X) - np.amin(X)
    unique_values = np.unique(Y)
    unique_count = len(unique_values)
    # Adjust the bins according to the number of different values
    if unique_count > bin_count:
        # More unique values than the number of categories? rank them
        #bins = np.array(get_jenks_breaks_fast(np.copy(Y), 5))
        bins = np.array(rank_by_quantiles(Y, 5))
    else:
        # Otherwise use unique_values for the bins
        # Add a large constant at the end so the bins are compatible with
        # numpy.digitize
        bins = np.append(unique_values, unique_values[-1] + 1)
    output = np.digitize(Y, bins)
    output -= 1

    return output
    

# TODO: write a unit test for this function
# TODO: comment this
def numpy_cast(value, numpy_type):
    numpy_int_types = [  np.int, np.int8, np.int16, np.int32, 
                                 np.uint8,np.uint16,np.uint32 ]
    # Check if machine precision is 64 bits for integers
    if sys.maxint > 2**32:
        numpy_int_types.append(np.int64)
        numpy_int_types.append(np.uint64)
    numpy_long_types = [ np.int64, np.uint64 ]
    numpy_float_types = [np.float, np.float32, np.float64]

    if numpy_type == type(np.bool):
        value = bool(value)
    elif numpy_type in numpy_int_types:
        value = int(value)
    elif numpy_type in numpy_float_types:
        value = float(value)
    elif numpy_type == type(np.complex64):
        value = complex(value)
    else:
        LOGGER.debug("Warning: can't cast %s to a python type." % \
            str(type(value)))
    return value
# TODO: write a unit test for this function
# TODO: comment this
def enumerate_shapefile_fields(shapefile_uri):
    message = "Error: '" + shapefile_uri + "' doesn't point to a file."
    assert os.path.isfile(shapefile_uri), message
    shapefile = ogr.Open(shapefile_uri)
    layer_count = shapefile.GetLayerCount()
    names = [] # names are organized by layer
    for l in range(layer_count):
        names.append([])
        layer = shapefile.GetLayer(l)
        feature_count = layer.GetFeatureCount()
        feature = layer.GetFeature(0)
        field_count = feature.GetFieldCount()
        for f in range(field_count):
            field_defn = feature.GetFieldDefnRef(f)
            names[l].append(field_defn.GetNameRef())
    return names

# TODO: write a unit test for this function
def has_field(field_name, shapefile):
    """Return True if the shapefile contains field_name, False otherwise.
        
        Inputs:
            - field_name: string to look for.
            - shapefile: where to look for the field.

        Output:
            - True if the field belongs to 'shapefile', False otherwise."""
    layer_count = shapefile.GetLayerCount()
    for l in range(layer_count):
        layer = shapefile.GetLayer(l)
        feature_count = layer.GetFeatureCount()
        assert(feature_count > 0)
        feature = layer.GetFeature(0)
        field_count = feature.GetFieldCount()
        for f in range(field_count):
            field_defn = feature.GetFieldDefnRef(f)
            if field_defn.GetNameRef() == field_name:
                return True
    return False

# TODO: write a unit test for this function
def get_layer_and_index_from_field_name(field_name, shapefile):
    """Given a field name, return its layer and field index.
        Inputs:
            - field_name: string to look for.
            - shapefile: where to look for the field.

        Output:
            - A tuple (layer, field_index) if the field exist in 'shapefile'.
            - (None, None) otherwise."""
    # Look into every layer
    layer_count = shapefile.GetLayerCount()
    for l in range(layer_count):
        layer = shapefile.GetLayer(l)
        # Make sure the layer is not empty
        feature_count = layer.GetFeatureCount()
        print("Layer " + str(l) + " has " + str(feature_count) + " features.")
        if feature_count > 0:
            feature = layer.GetFeature(0)
            # Enumerate every field
            field_count = feature.GetFieldCount()
            print('fields:')
            for f in range(field_count):
                print(f)
                field_defn = feature.GetFieldDefnRef(f)
                if field_defn.GetNameRef() == field_name:
                    return (l, f)
    # Nothing found
    return (None, None)

def combined_rank(R_k):
    """Compute the combined habitats ranks as described in equation (3)
    
        Inputs:
            - R_k: the list of ranks
            
        Output:
            - R_hab as decribed in the user guide's equation 3."""
    return 4.8 -0.5 *math.sqrt( (1.5 *max(5-R_k))**2 + \
                    sum((5-R_k)**2) -(max(5-R_k))**2)

def disc_kernel(r):
    """Create a (r+1)^2 disc-shaped array filled with 1s where d(i-r,j-r) <= r
    
        Input: r, the kernel radius. r=0 is a single scalar of value 1.
        
        Output: a (r+1)x(r+1) array with:
                - 1 if cell is closer than r units to the kernel center (r,r),
                - 0 otherwise.
                
            Distances are Euclidean."""
    # Create a grid of an evenly-spaced datapoints of diameter r * 2 + 1
    [X, Y] = np.mgrid[0:(r*2+1), 0:(r*2+1)]
    # Compute an array of 1s where the distance to the center (r,r) < r
    kernel = (r**2 >= np.square(X-r)+np.square(Y-r)).astype(int)
    return kernel

def set_H_threshold(threshold):
    """ Return 0 if fetch is strictly below a threshold in km, 1 otherwise.
    
        Inputs:
            fetch: fetch distance in meters.

        Return:
            1 if fetch >= threshold (in km)
            0 if fetch  < threshold

        Note: conforms to equation 4.8 in the invest documentation."""
    def H(fetch):
        return np.array(fetch >= threshold).astype(int)

    return H

# TODO: write a unit test for this function
def raster_spatial_reference(raster):
    """Extract a WKT-compliant spatial reference from a dataset (raster).
    
        Input: The dataset.
        
        Output: the dataset's WKT-compliant spatial reference."""
    srs = osr.SpatialReference()
    srs.ImportFromWkt(raster.GetProjection())
    return srs

# TODO: write a unit test for this function
def shapefile_spatial_reference(shapefile):
    """Extract a WKT-compliant spatial reference from a datasource (shapefile).
    
        Input: A raster datasource.
        
        Output: the datasource's WKT-compliant spatial reference."""
    return shapefile.GetLayer(0).GetSpatialRef()

# TODO: write a unit test for this function
# TODO: remove 'projection' from function name
def raster_wkt_projection(raster):
    """ Return the projection of a raster in the OpenGIS WKT format.
    
        Input: 
            - raster: raster file
        
        Output:
            - a projection encoded as a WKT-compliant string."""
    return raster.GetProjection()

# TODO: write a unit test for this function
# TODO: remove 'projection' from function name
# TODO: add this to raster_utils
def shapefile_wkt_projection(shapefile):
    """ Return the projection of a shapefile in the OpenGIS WKT format.
    
        Input: 
            - raster: raster file
        
        Output:
            - a projection encoded as a WKT-compliant string."""
    layer = shapefile.GetLayer()
    sr = layer.GetSpatialRef()
    return sr.ExportToWkt()

# TODO: write a unit test for this function
def projections_match(projection_list):
    """Check that two gdal datasets are projected identically. 
       Functionality adapted from Doug's 
       biodiversity_biophysical.check_projections 

        Inputs:
            - projection_list: list of projections to compare

        Output: 
            - False the datasets are not projected identically.
    """
    assert(len(projection_list) > 1)

    srs_1 = osr.SpatialReference()
    srs_2 = osr.SpatialReference()

    srs_1.ImportFromWkt(projection_list[0])

    for projection in projection_list:
        srs_2.ImportFromWkt(projection)

        if srs_1.IsProjected() != srs_2.IsProjected():
            LOGGER.debug('Different proj.: One of the Rasters is Not Projected')
            return False
        if srs_1.GetLinearUnits() != srs_2.GetLinearUnits():
            LOGGER.debug('Different proj.: Proj units do not match %s:%s', \
                     srs_1.GetLinearUnits(), srs_2.GetLinearUnits())
            return False
    
        if srs_1.GetAttrValue("PROJECTION") != srs_2.GetAttrValue("PROJECTION"):
            LOGGER.debug('Projections are not the same')
            return False

    return True

# TODO: write a unit test for this function
def point_from_shapefile(shapefile):
    """ Return a point that lies within the region specified by the shapefile.
    
        Inputs:
            - shapefile: shapefile that contains geometric features
            
        Output:
            - A coordinate tuple (x, y) of a point lying in the envelope of the
              first geometry in the shapefile."""
    feat = shapefile.GetLayer(0).GetNextFeature()
    geom = feat.GetGeometryRef()
    envelope = geom.GetEnvelope()
    x = (envelope[0] + envelope[1]) / 2 
    y = (envelope[2] + envelope[3]) / 2

    return (x, y)


# TODO: write a unit test for this function
def pixel_size_within_aoi(aoi, raster):
    """This function helps retrieve the pixel sizes of the global DEM 
    when given an area of interest that has a certain projection.
    
    aoi - A point shapefile datasource indicating the area of interest
    global_dem - The global DEM dataset to get the pixel size from
    
    returns - A tuple of the x and y pixel sizes of the global DEM 
              given in the units of what 'shape' is projected in
    """
    # Get the spatial reference for each object
    aoi_sr = shapefile_spatial_reference(aoi)
    raster_sr = raster_spatial_reference(raster)
    # Get forward and inverse transformations
    T = osr.CoordinateTransformation(raster_sr, aoi_sr)
    T_inverse = osr.CoordinateTransformation(aoi_sr, raster_sr)
    #Get a point in the clipped shape to determine output grid size
    x, y = point_from_shapefile(aoi)
    #Convert the point from meters to geom_x/long
    point = T_inverse.TransformPoint(x, y)
        
    #Get the size of the pixels in meters, to be used for creating rasters
    pixel_size = \
        raster_utils.pixel_size_based_on_coordinate_transform(raster, T, point)
    return pixel_size

# TODO: write a unit test for this function
def adjust_raster_to_aoi(data_uri, aoi_uri, cell_size, output_uri):
    """Adjust the raster's data to the aoi, i.e.reproject & clip data points.
    
        Inputs:
            - data: the dataset to adjust
            - aoi: area of interest
            - base_path: directory where the intermediate data will be stored.
            
        Output:
            - A reprojected raster that is clipped to the aoi."""
    # Split the path apart from the filename
    head, tail = os.path.split(output_uri)
    # Split the file basename from the file extension
    base, ext = os.path.splitext(tail)
    # Open URIs and get the projections
    data = gdal.Open(data_uri)
    aoi = gdal.Open(aoi_uri)
    data_wkt = raster_wkt_projection(data)
    aoi_wkt = raster_wkt_projection(aoi)

    # Reproject the aoi to data's projection
    if projections_match([data_wkt, aoi_wkt]):
        # Same projections, just clip
        raster_utils.clip_dataset(data, aoi, output_uri)
    else:
        # Reproject the aoi to be in data's projection
        raster_utils.reproject_datasource(aoi, data_wkt, \
        os.path.join(head, base + '_reprojected_aoi' + ext))
        # Clip all the points outside the aoi
        out_uri = os.path.join(head, base + '_clipped' + ext)
        raster_utils.clip_dataset(data, aoi, out_uri)
        # Convert the datasource back to the original projection (aoi's)
        raster_utils.reproject_dataset(data, aoi_wkt, cell_size, output_uri)
    return output_uri

# TODO: write a unit test for this function
def adjust_shapefile_to_aoi(data_uri, aoi_uri, output_uri):
    """Adjust the shapefile's data to the aoi, i.e.reproject & clip data points.
    
        Inputs:
            - data: datasource to adjust
            - aoi: area of interest
            - base_path: directory where the intermediate files will be saved

        Output:
            - output_uri: a dataset that is clipped and/or reprojected to the 
            aoi if necessary."""
    print('Adjusting ' + data_uri + ' to ' + output_uri)
    # Data and aoi are the same URIs, data is good as it is, return it.
    if data_uri == aoi_uri:
        return data_uri
    # Split the path apart from the filename
    head, tail = os.path.split(output_uri)
    # Split the file basename from the file extension
    base, ext = os.path.splitext(tail)
    # Open URIs and get the projections
    data = ogr.Open(data_uri)
    aoi = ogr.Open(aoi_uri)
    data_wkt = shapefile_wkt_projection(data)
    aoi_wkt = shapefile_wkt_projection(aoi)

    if projections_match([data_wkt, aoi_wkt]):
        print('same projection, just clipping')
        # Same projections, just clip
        clip_datasource(aoi, data, output_uri)
    else:    
        # Reproject the aoi to be in data's projection
        projected_aoi_uri = os.path.join(head, base + '_projected_aoi')
        # TODO: include this in raster utils
        # Removing output_uri if it already exists
        if os.path.isdir(projected_aoi_uri):
            shutil.rmtree(projected_aoi_uri)
        raster_utils.reproject_datasource(aoi, data_wkt, projected_aoi_uri)
        print('different projection, reproject ' + aoi_uri + ' to ' + \
        projected_aoi_uri)
        # Clip all the shapes outside the aoi
        out_uri = os.path.join(head, base + '_clipped')
        clip_datasource(ogr.Open(projected_aoi_uri), data, out_uri)
        print('different projection, clipping ' + projected_aoi_uri + ' to ' + \
        out_uri)
        # Convert the datasource back to the original projection (aoi's)
        # TODO: include this in raster utils
        # Removing output_uri if it already exists
        if os.path.isdir(output_uri):
            shutil.rmtree(output_uri)
        raster_utils.reproject_datasource(ogr.Open(out_uri),aoi_wkt, \
        output_uri)
        print("reproject " + out_uri + " to aoi's original projection" + \
        output_uri)
    # Ensure the resulting file's 1st layer is not empty
    out_shapefile = ogr.Open(output_uri)
    out_layer = out_shapefile.GetLayer(0)
    out_feature_count = out_layer.GetFeatureCount()
    out_layer = None
    out_shapefile = None
    message = 'Error: first layer of ' + output_uri + ' is empty. Are ' + \
    data_uri + ' and ' + aoi_uri + ' mis-aligned?'
    assert out_feature_count > 0, message
    return output_uri
    
def clip_datasource(aoi_ds, orig_ds, output_uri):
    """Clip an OGR Datasource of geometry type polygon by another OGR Datasource
        geometry type polygon. The aoi_ds should be a shapefile with a layer
        that has only one polygon feature

        aoi_ds - an OGR Datasource that is the clipping bounding box
        orig_ds - an OGR Datasource to clip
        out_uri - output uri path for the clipped datasource

        returns - a clipped OGR Datasource """
    orig_layer = orig_ds.GetLayer()
    aoi_layer = aoi_ds.GetLayer()

    # If the file already exists remove it
    if os.path.isfile(output_uri):
        os.remove(output_uri)
    elif os.path.isdir(output_uri):
        shutil.rmtree(output_uri)

    # Create a new shapefile from the orginal_datasource 
    output_driver = ogr.GetDriverByName('ESRI Shapefile')
    output_datasource = output_driver.CreateDataSource(output_uri)

    # Get the original_layer definition which holds needed attribute values
    original_layer_dfn = orig_layer.GetLayerDefn()

    # Create the new layer for output_datasource using same name and geometry
    # type from original_datasource as well as spatial reference
    output_layer = output_datasource.CreateLayer(
            original_layer_dfn.GetName(), orig_layer.GetSpatialRef(), 
            original_layer_dfn.GetGeomType())

    # Get the number of fields in original_layer
    original_field_count = original_layer_dfn.GetFieldCount()

    # For every field, create a duplicate field and add it to the new 
    # shapefiles layer
    for fld_index in range(original_field_count):
        original_field = original_layer_dfn.GetFieldDefn(fld_index)
        output_field = ogr.FieldDefn(
                original_field.GetName(), original_field.GetType())
        output_field.SetWidth(original_field.GetWidth())
        output_field.SetPrecision(original_field.GetPrecision())
        output_layer.CreateField(output_field)

    # Get the feature and geometry of the aoi
    aoi_feat = aoi_layer.GetFeature(0)
    aoi_geom = aoi_feat.GetGeometryRef()

    # Iterate over each feature in original layer
    for orig_feat in orig_layer:
        # Get the geometry for the feature
        orig_geom = orig_feat.GetGeometryRef()
        # Check to see if the feature and the aoi intersect. This will return a
        # new geometry if there is an intersection. If there is not an
        # intersection it will return an empty geometry or it will return None
        # and print an error to standard out
        intersect_geom = aoi_geom.Intersection(orig_geom)
       
        if not intersect_geom == None and not intersect_geom.IsEmpty():
            # Copy original_datasource's feature and set as new shapes feature
            output_feature = ogr.Feature(
                    feature_def=output_layer.GetLayerDefn())
            output_feature.SetGeometry(intersect_geom)
            # Since the original feature is of interest add it's fields and
            # Values to the new feature from the intersecting geometries
            for fld_index2 in range(output_feature.GetFieldCount()):
                orig_field_value = orig_feat.GetField(fld_index2)
                output_feature.SetField(fld_index2, orig_field_value)

            output_layer.CreateFeature(output_feature)
            output_feature = None

    return output_datasource

# TODO: write a unit test for this function
# TODO: Update docstrings!
def save_fetch_distances(fetch, aoi_uri, cell_size, base_path, prefix = ''):
    """ Create dictionary of raster filenames of fetch F(n) for each sector n.
    
        Inputs:
            - wind_data: wind data points adjusted to the aoi
            - aoi: used to create the rasters for each sector
            - cell_size: raster granularity in meters
            - base_path: base path where the generated raster will be saved
            
        Output:
        A list of raster URIs corresponding to sectors of increasing angles 
        where data points encode the sector's fetch distance for that point"""
    no_data = -32768.
    field_prefix = os.path.join(base_path, prefix + 'fetch_distance')
    extension = '.tif'

    # Save computed raster
    raster_list = []
    # Extract the # of sectors, assumed to start at angle 0 with identical span
    sector_count = 0
    fetch_keys = fetch.keys()
    for point in fetch_keys:
        sector_count = len(fetch[point])
        break
    # Build F(n), raster filename dictionary and save data to disk
    for sector in range(sector_count):
        angle = str(sector *360 /sector_count)
        # Open raster file
        filename = field_prefix + '_' + angle + extension
        raster =\
            raster_utils.create_raster_from_vector_extents(cell_size,cell_size,\
            gdal.GDT_Float32, no_data, filename, ogr.Open(aoi_uri))
        band = raster.GetRasterBand(1)
        array = band.ReadAsArray() 
        # Build a fetch array F(n) for sector n
        array = np.ones_like(array) * no_data
        for point in fetch_keys:
            array[point] = fetch[point][sector]
        # Save F(n) to disk
        band.WriteArray(array)
        raster_list.append(filename)

    return raster_list

# TODO: write a unit test for this function
# TODO: Update docstrings!
def save_fetch_depths(fetch, aoi_uri, cell_size, base_path, prefix):
    """ Create dictionary of raster filenames of fetch F(n) for each sector n.
    
        Inputs:
            - wind_data: wind data points adjusted to the aoi
            - aoi: used to create the rasters for each sector
            - cell_size: raster granularity in meters
            - base_path: base path where the generated raster will be saved
            
        Output:
            A dictionary where keys are sector angles in degrees and values are
            raster filenames where F(n) is defined on each cell"""
    no_data = -32768.
    field_prefix = os.path.join(base_path, prefix + 'fetch_depth')
    extension = '.tif'

    # Save computed raster
    raster_list = []
    # Extract the # of sectors, assumed to start at angle 0 with identical span
    sector_count = 0
    fetch_keys = fetch.keys()
    for point in fetch_keys:
        sector_count = len(fetch[point])
        break
    # Build F(n), raster filename dictionary and save data to disk
    for sector in range(sector_count):
        name = str(sector *360 /sector_count)
        # Open raster file
        filename = field_prefix +'_' +name +extension
        raster =\
            raster_utils.create_raster_from_vector_extents(cell_size,cell_size,\
            gdal.GDT_Float32, no_data, filename, ogr.Open(aoi_uri))
        band = raster.GetRasterBand(1)
        array = band.ReadAsArray() 
        # Build a fetch array F(n) for sector n
        array = np.ones_like(array) * no_data
        for point in fetch_keys:
            array[point] = fetch[point][sector]
        # Save F(n) to disk
        band.WriteArray(array)
        raster_list.append(filename)

    return raster_list

# TODO: write a unit test for this function
# TODO: Update docstrings!
def extract_water_depths(water_depths, aoi, cell_size, base_path, prefix):
    """ Create dictionary of water depth rasters d(n) for each sector n.
    
        Inputs:
            - wind_data: wind data points adjusted to the aoi
            - aoi: used to create the rasters for each sector
            - cell_size: raster granularity in meters
            - base_path: base path where the generated raster will be saved
            
        Output:
            A dictionary where keys are sector angles in degrees and values are
            raster filenames where F(n) is defined on each cell"""
    field_prefix = os.path.join(base_path, prefix + 'fetch_depth')
    extension = '.tif'

    # Save computed raster
    raster_list = {} # key is the direction angle
    # Extract the # of sectors, assumed to start at angle 0 with identical span
    sector_count = 0
    depth_keys = water_depths.keys()
    for point in depth_keys:
        sector_count = len(water_depths[point])
#        print('water_depth[point]', water_depths[point])
        break
    # Build F(n), raster filename dictionary and save data to disk
    for sector in range(sector_count):
        name = str(sector *360 /sector_count)
        # Open raster file
        filename = field_prefix +'_' +name +extension
        raster =\
            raster_utils.create_raster_from_vector_extents(cell_size,cell_size,\
            gdal.GDT_Float32, -32768., filename, aoi)
        band = raster.GetRasterBand(1)
        array = band.ReadAsArray() 
        # Build a water depth array d(n) for sector n
        array = np.zeros_like(array)
        for point in depth_keys:
            array[point] = water_depths[point][sector]
        # Save F(n) to disk
        band.WriteArray(array)
        raster_list[name] = filename

    return raster_list

# TODO: write a unit test for this function
#:RICH:WHAT DO YOU GET FROM THE CLOSURE HERE?  I WOULD PREFER A STATIC FUNCTION AND EXPLICITLY PASSING ALL THE ARGUMENTS
def set_save_info(base_path, aoi_uri, cell_size, default_nodata = 0.,
gdal_type = gdal.GDT_Float32):
    """Closure that saves an array in a raster constructed from an AOI.
    
        Inputs:
            - base_path: base path used to concatenate the raster filename to
            - aoi_uri: URI to the AOI from which to construct the template raster
            - cell_size: granularity of the rasterization in meters
            
        Output:
            - save_array: a 'save_array' object."""
    def save_array(array, filename, recompute_no_data = True, no_data = None):
        """ Save an array to a raster constructed from an AOI.
        
            Inputs:
                - array: the array to be saved
                - filename: where the array will be saved
                
            Output:
                - save the array in a raster file constructed from the AOI of
                  granularity specified by cell_sizei
                - Return the array uri."""
        file_path = os.path.join(base_path, filename)

        # Remove the file if it already exist
        if os.path.isfile(file_path):
            os.remove(file_path)
        
        if no_data == None:
            no_data = default_nodata
            if recompute_no_data:
                no_data = float(raster_utils.calculate_value_not_in_array(array))
            no_data = raster_utils.gdal_cast(no_data, gdal_type)

        aoi = ogr.Open(aoi_uri)
        raster =\
            raster_utils.create_raster_from_vector_extents(\
            cell_size,cell_size, gdal_type, no_data, file_path, aoi)
        band = raster.GetRasterBand(1)

        try:
            band.WriteArray(array)
            raster_utils.calculate_raster_stats(raster)
        except:
            internal_array = band.ReadAsArray()
            LOGGER.debug("Error: can't save array to %s." % file_path)
            print('source array size:', array.shape)
            print('destination array size:', internal_array.shape)

        return file_path

    assert(type(aoi_uri) is str)
    # Create the directory if necessary
    if not os.path.exists(base_path):
        LOGGER.debug('directory %s doesn\'t exist, creating one.' % base_path)
        os.makedirs(base_path)

    return save_array

# TODO: write a unit test for this function
#:RICH: SAME COMMENT ABOUT CLOSURE, DO YOU GET SOMETHING BENEFICIAL HERE?
def assign_dictionary(dictionary):
    """ Closure allowing to index raster arrays from a file dictionary by string
    
        Input: 
            - dictionary: the dictionary that points to raster files
            - sector: the key that points to an existing raster filename
            
        Output:
            - An array extracted from the raster file pointed to by the
              dictionary"""
    assert(len(dictionary) > 0)

    def raster_list(sector):
        try:
            raster_filename = dictionary[str(sector)]
        except KeyError:
            print('key', sector, '= ' + str(sector) + " doesn't exist")
            print('available keys', dictionary.keys())
            assert(False)

        raster = gdal.Open(raster_filename)
        band = raster.GetRasterBand(1)
        raster_array = band.ReadAsArray()
        
        raster = None
        band = None
        
        return raster_array

    return raster_list

# TODO: write a unit test for this function
# TODO: Adjust the raster data type depending on the field type!!!

#:RICH: this function looks very similar to raster_utils.create_raster_from_vector_extents, can you see if there is duplication?
def raster_from_shapefile_uri(shapefile_uri, aoi_uri, cell_size, output_uri, \
    field=None, all_touched=False, nodata = 0.):
    """Burn default or user-defined data from a shapefile on a raster.

        Inputs:
            - shapefile: the dataset to be discretized
            - aoi: area extents over which the array is mapped
            - cell_size: coarseness of the discretization (in meters)
            - output_uri: uri where the raster will be saved
            - field: optional field name where to extract the data from
            - all_touched: optional boolean that indicates if we use GDAL's
              ALL_TOUCHED parameter when rasterizing.

        Output: A shapefile where:
            If field is specified, the field data is used as burn value.
            If field is not specified, then:
                - shapes on the first layer are encoded as 1s
                - the rest is encoded as 0"""
    shapefile = ogr.Open(shapefile_uri)
    message = "Can't open shapefile " + shapefile_uri
    assert shapefile, message
    if aoi_uri == shapefile_uri:
        aoi = shapefile
    else:
        aoi = ogr.Open(aoi_uri)
    # TODO: Add an optional argument to better handle nodata
    nodata = 0
    # Create the raster that will contain the new data
    raster = \
        raster_utils.create_raster_from_vector_extents(cell_size, 
        cell_size, gdal.GDT_Int32, nodata, output_uri, aoi)
    band, NO_DATA = raster_utils.extract_band_and_nodata(raster)
    layer = shapefile.GetLayer(0)
    # Add the all_touched option
    options = ['ALL_TOUCHED='+str(all_touched).upper()]
    if field:
        # Burn the data in 'field' to a raster
        layer_id, attribute_id = \
        get_layer_and_index_from_field_name(field, shapefile)
        layer = shapefile.GetLayer(layer_id)
        layer_def = layer.GetLayerDefn()
        field_def = layer_def.GetFieldDefn(attribute_id)
        field_name = field_def.GetNameRef()
        options = ['ATTRIBUTE='+field] + options
        gdal.RasterizeLayer(raster, [1], layer, options = options)
    else:
        gdal.RasterizeLayer(raster,[1],layer,burn_values=[1],options=options)
    return output_uri 

def cast_ray_fast(land_raster, direction, d_max):
    """ March from the origin towards a direction until either land or a
    maximum distance is met.
    
        Inputs:
        - origin: algorithm's starting point -- has to be on sea
        - direction: marching direction
        - d_max: maximum distance to traverse
        - raster: land mass raster
        
        Returns the distance to the origin."""
    # Rescale the stepping vector so that its largest coordinate is 1
    unit_step = direction / np.fabs(direction).max()
    # Compute the length of the normalized vector
    unit_step_length = np.sqrt(np.sum(unit_step**2))
    # Compute the number of steps to take
    # Use ceiling to make sure to include any cell that is within the range of
    # max_fetch
    step_count = int(math.ceil(d_max / unit_step_length))
    I = np.array([i*unit_step[0] for i in range(step_count+1)])
    J = np.array([j*unit_step[1] for j in range(step_count+1)])

    return ((I, J), unit_step_length)
   
def compute_shore_orientation(shore_uri, landmass_uri, bathymetry_uri):
    """Compute the shore orientation"""
    shore_raster = gdal.Open(shore_uri)
    shore_array = shore_raster.GetRasterBand(1).ReadAsArray()
    landmass_raster = gdal.Open(landmass_uri)
    landmass_array = landmass_raster.GetRasterBand(1).ReadAsArray()
    bathymetry_raster = gdal.Open(bathymetry_uri)
    bathymetry_array = bathymetry_raster.GetRasterBand(1).ReadAsArray()

def fetch_vectors(angles):
    """convert the angles passed as arguments to raster vector directions.
    
        Input:
            -angles: list of angles in radians
            
        Outputs:
            -directions: vector directions numpy array of size (len(angles), 2)
    """
    # Raster convention: Up is north, i.e. decreasing 'i' is towards north.
    # Wind convention: Wind is defined as blowing FROM and not TOWARDS. This
    #                  means that fetch rays are going where the winds are
    #                  blowing from:
    # top angle: cartesian convention (x axis: J, y axis: negative I)
    # parentheses: (oceanographic   
    #               convention)    Angle   direction   ray's I  ray's J
    #                                                  coord.   coord. 
    #              90                  0      north       -1        0
    #             (90)                90       east        0        1
    #               |                180      south        1        0
    #               |                270       west        0       -1
    #     0         |         180 
    #   (180)-------+-------->(0)  Cartesian to oceanographic
    #               |              angle transformation: a' = 180 - a  
    #               |              
    #               |              so that: [x, y] -> [I, J]
    #              270  
    #             (270)
    #            
    directions = np.empty((len(angles), 2))

    for a in range(len(angles)):
        pi = math.pi
        directions[a] =(round(math.cos(pi - angles[a]), 10),\
                        round(math.sin(pi - angles[a]), 10))
    return directions

def compute_fetch_uri(landmass_raster_uri, rays_per_sector, d_max, cell_size, \
    shore_uri, bathymetry, bathymetry_nodata): #bathymetry_uri):
    """ Given a land raster, return the fetch distance from a point
    in given directions 
        
        - land_raster: raster where land is encoded as 1s, sea as 0s,
            and cells outside the area of interest as anything 
            different from 0s or 1s.
        - directions: tuple of angles (in radians) from which the fetch
            will be computed for each pixel.
        - d_max: maximum distance in meters over which to compute the fetch
        - cell_size: size of a cell in meters
        - shore_uri: URI to the raster where the shoreline is encoded as 1s, 
            the rest as 0s.
        
        returns: a tuple (distances, depths) where:
            distances is a dictionary of fetch data where the key is a shore
            point (tuple of integer coordinates), and the value is a 1*sectors 
            numpy array containing fetch distances (float) from that point for
            each sector. The first sector (0) points eastward."""
    # Extract bathymetry information
    #bathymetry_raster = gdal.Open(bathymetry_uri)
    #band = bathymetry_raster.GetRasterBand(1)
    #bathymetry_nodata = band.GetNoDataValue()
    #bathymetry = band.ReadAsArray()
    
    # Extract landmass information
    landmass_raster = gdal.Open(landmass_raster_uri)
    land_array = landmass_raster.GetRasterBand(1).ReadAsArray()

    # Extract shore from raster
    shore_raster = gdal.Open(shore_uri)
    shore_array = shore_raster.GetRasterBand(1).ReadAsArray()
    shore_points = np.where(shore_array == 1)
    assert(shore_points[0].size > 0)

    distance, avg_depth = compute_fetch(land_array, rays_per_sector, \
        d_max, cell_size, shore_points, bathymetry, bathymetry_nodata)
    
    return (distance, avg_depth)

# TODO: Add docstring to this function
def compute_fetch(land_array, rays_per_sector, d_max, cell_size, \
    shore_points, bathymetry, bathymetry_nodata):
    # Make sure there is some data for the shore
    message = 'Error: there is no bathymetry data for the shore' + \
    '(everything along the shore is nodata).'
    assert np.where(bathymetry[shore_points] != bathymetry_nodata)[0].size >0,\
    message
    # precompute directions
    direction_count = SECTOR_COUNT * rays_per_sector
    direction_range = range(direction_count)
    direction_step = 2.0 * math.pi / direction_count
    directions_rad = [a * direction_step for a in direction_range]
    direction_vectors = fetch_vectors(directions_rad)
    unit_step_length = np.empty(direction_vectors.shape[0])
    # Compute the ray paths in each direction to their full length (d_max).
    # We'll clip them for each point in two steps (raster boundaries & land)
    # The points returned by the cast function are relative to the origin (0,0)
    ray_path = {}
    for d in direction_range:
        result = \
        cast_ray_fast(land_array,direction_vectors[d], MAX_FETCH/cell_size)
        ray_path[directions_rad[d]] = result[0]
        unit_step_length[d] = result[1]
    # For each point, we use the rays in ray_path, and clip them in 2 steps:
    # 1)- clip the ray paths that go beyond the raster boundaries
    # 2)- If a ray passes over a landmass, remove that section till the end
    # All this computation has to be done on a per-point basis.
    point_list = np.array(zip(shore_points[0], shore_points[1]))
    distance = {}
    avg_depth = {}
    for point in point_list:
        key = (point[0], point[1])
        distance[key] = np.empty(direction_count)
        avg_depth[key] = np.empty(direction_count)
        for d in range(direction_count):
            direction = directions_rad[d]
            # Anchor the ray path to the current point
            I = ray_path[direction][0]+point[0]
            J = ray_path[direction][1]+point[1]
            # We need integer indices to index arrays: round I and J
            I = np.around(I).astype(int)
            J = np.around(J).astype(int)
            # Constrain the ray within the raster size limit
            (i_raster, j_raster) = land_array.shape
            (i_bathy, j_bathy) = bathymetry.shape
            i_count = min(i_raster, i_bathy)
            j_count = min(j_raster, j_bathy)
            # valid indices must be within raster bounds
            valid_i = np.where((I>=0) & (I<i_count))
            valid_j = np.where((J>=0) & (J<j_count))
            # If not all indices within bounds, remove those out of bounds
            if valid_i[0].size < I.size:
                I = I[valid_i]
                J = J[valid_i]
            if valid_j[0].size < J.size:
                I = I[valid_j]
                J = J[valid_j]
            # At this point, all indices are within bounds
            # Extract only those ray indices that are not over land
            sea_indices = np.where(land_array[(I, J)] < 1)[0]
            # If not all indices over water -> keep first section over water
            if sea_indices[-1] != len(sea_indices) - 1:
                # Find the index after the first section over water:
                # Since ray indices over land don't show up in sea_indices, do
                # 1- Subtract each index from its predecessor (D_i=i_n - i_n-1)
                # 2- Continuous indices over water have a D_i == 1, otherwise
                #   the indices are separated by land (D_i > 1). We extract 
                #   all indices that have a discontinuity, I=np.where(D_i > 1)
                non_consecutive = \
                    np.where(sea_indices[1:] - sea_indices[0:-1] > 1)[0]
                # 3- The index at I[0] is the end of the ray we want to keep
                #   (before the first time the ray hits land). We use I[0]+1
                #   for slicing ray.
                sea_indices = (sea_indices[:non_consecutive[0]+1],)
            # At this point, the ray stops before the first landmass
            # We use sea_indices to extract the accurate portion of the ray to
            # compute the distance
            I = I[sea_indices]
            J = J[sea_indices]
            ## Some rays might touch the AOI's boundary, detect them
            #touch_aoi = np.where(land_array[(I, J)] < 0.)[0].size > 0
            ## If so, remove the shore pixel from shore_array
            #if touch_aoi:
            #    #print('shore point ' + str(point) + 'touches AOI!')
            #    shore_array[point[0]][point[1]] = 0
            #    break
            # We now compute the distance traversed by the ray, which we almost
            # have already: we know the length of the ray when moving 1 cell 
            # (by taking 1 step). The number of steps to get the ray is the
            # biggest of its coordinates:
            step_count = max(math.fabs(I[-1]-I[0]), math.fabs(J[-1]-J[0]))
            D = step_count * unit_step_length[d]
            # We want to return the maximum fetch distance: it's max_fetch if
            # the ray is not stopped by land before, else it's the maximum
            # distance the ray traversed over water. D is not this maximum
            # length: the marching algorithm makes 1 pixel jumps in either the
            # x or y direction starting at the center of the first pixel. So,
            # 1/2 of the last pixel is not accounted for in D. We have to take
            # this into account.
            to_last_pixel_edge = unit_step_length[d] / 2.
            # Fetch distance is distance from pixel center to edge of water
            distance[key][d] = min(MAX_FETCH, (D+to_last_pixel_edge)*cell_size)
            # reset invalid depth values from segments outside the bathymetry
            # layer
            depths = bathymetry[(I, J)]

            if depths[0] == bathymetry_nodata:
                average_depth = np.array([-100.0])
            # Valid depths, compute the average
            else:
                # Remove positive values
                positive = np.where(depths > 0.)
                if positive[0].size > 0:
                    negative = np.where(depths < 0.)
                    if negative[0].size > 0:
                        depths = depths[negative]
                    # If depths are all positive, set to zero
                    else:
                        depths = np.array([0.])
                # Remove nodata from depth values
                non_nodata = np.where(depths != bathymetry_nodata)
                if not non_nodata:
                    print('non_nodata', non_nodata)
                    print('depths', depths)
                    print('bathymetry_uri', bathymetry_uri)
                    print('bathymetry', bathymetry.shape, np.unique(bathymetry))
                if non_nodata[0].size > 0:
                    depths = depths[non_nodata]
                # Average depth is mean bathymetry along the ray
                average_depth = np.average(depths)
            avg_depth[key][d] = average_depth
        # We have the distances for all the directions, now we combine them
        # Shift the arrays so that each sector has an equal number of rays on 
        # each side of its center
        distance[key] = np.roll(distance[key], (rays_per_sector / 2))
        avg_depth[key] = np.roll(avg_depth[key], (rays_per_sector / 2))
        # Reshape the fetch arrays so that a row corresponds to a sector
        distance[key] = \
            np.reshape(distance[key], (SECTOR_COUNT, rays_per_sector))
        avg_depth[key] = \
            np.reshape(avg_depth[key], (SECTOR_COUNT, rays_per_sector))
        # Compute the weights by taking the cos of the appropriately shifted 
        # angles
        angles = np.array(directions_rad[:rays_per_sector])
        angles -= directions_rad[rays_per_sector / 2]
        cos = np.cos(angles)
        # Take the weighted rows average column-wise
        distance[key] = \
            np.minimum(np.average(distance[key] * cos, axis = 1), d_max)
        avg_depth[key] = np.average(avg_depth[key], axis = 1)
        pos_depth = np.where(avg_depth[key] >= 0)
        if pos_depth[0].size:
            message = str(pos_depth[0].size) + \
            ' points have positive depth, set to -1.'
            LOGGER.warning(message)
            avg_depth[key][pos_depth] = -1

    return (distance, avg_depth)

def adjust_raster_to_aoi(in_dataset_uri, aoi_datasource_uri, cell_size, \
    out_dataset_uri):
    """Adjust in_dataset_uri to match aoi_dataset_uri's extents, cell size and
    projection.
    
        Inputs:
            - in_dataset_uri: the uri of the dataset to adjust
            - aoi_dataset_uri: uri to the aoi we want to use to adjust 
                in_dataset_uri
            - out_dataset_uri: uri to the adjusted dataset

        Returns:
            - out_dataset_uri"""
    # Split the path apart from the filename
    out_head, out_tail = os.path.split(out_dataset_uri)
    head, tail = os.path.split(in_dataset_uri)
    # Split the file basename from the file extension
    out_base, out_ext = os.path.splitext(out_tail)
    base, ext = os.path.splitext(tail)
    # Preliminary variable initialization
    aoi_wkt = shapefile_wkt_projection(ogr.Open(aoi_datasource_uri))
    input_wkt = raster_wkt_projection(gdal.Open(in_dataset_uri))
    # Reproject AOI to input dataset projection
    reprojected_aoi_uri = os.path.join(out_head, base + '_reprojected_aoi.shp')
    raster_utils.reproject_datasource_uri(aoi_datasource_uri, input_wkt, \
    reprojected_aoi_uri)
    # Clip dataset with reprojected AOI
    clipped_dataset_uri = os.path.join(out_head, out_base + '_unprojected.tif')
    raster_utils.clip_dataset_uri(in_dataset_uri, reprojected_aoi_uri, \
    clipped_dataset_uri, False)
    # Reproject clipped dataset to AOI's projection
    #raster_utils.reproject_dataset_uri(clipped_dataset_uri, cell_size, \
    raster_utils._experimental_reproject_dataset_uri(clipped_dataset_uri, \
    cell_size, aoi_wkt, out_dataset_uri)
    # Done, return the dataset uri
    return out_dataset_uri    

def detect_shore(landmass_raster_uri, aoi_raster_uri):
    """ Extract the boundary between land and sea from a raster.
    
        - raster: numpy array with sea, land and nodata values.
        
        returns a numpy array the same size as the input raster with the shore
        encoded as ones, and zeros everywhere else."""
    # Rich's super-short solution, which uses convolution.
    nodata = -1 
    landmass_raster = gdal.Open(landmass_raster_uri)
    land_sea_array = landmass_raster.GetRasterBand(1).ReadAsArray()
    landmass_raster = None
    aoi_raster = gdal.Open(aoi_raster_uri)
    aoi_array = aoi_raster.GetRasterBand(1).ReadAsArray()
    aoi_nodata = aoi_raster.GetRasterBand(1).GetNoDataValue()
    aoi_raster = None
    land_sea_array[aoi_array == aoi_nodata] = nodata
    # Don't bother computing anything if there is only land or only sea
    land_size = np.where(land_sea_array > 0)[0].size

    if land_size == 0:
        LOGGER.warning('There is no shore to detect: land area = 0')
        return np.zeros_like(land_sea_array)
    elif land_size == land_sea_array.size:
        LOGGER.warning('There is no shore to detect: sea area = 0')
        return np.zeros_like(land_sea_array)
    else:
        kernel = np.array([[ 0, -1,  0],
                           [-1,  4, -1],
                           [ 0, -1,  0]])
        # Generate the nodata shore artifacts
        aoi_array = np.ones_like(land_sea_array)
        aoi_array[land_sea_array == nodata] = nodata
        aoi_borders = (sp.signal.convolve2d(aoi_array, \
                                                kernel, \
                                                mode='same') <0 ).astype('int')
        # Generate all the borders (including data artifacts)
        borders = (sp.signal.convolve2d(land_sea_array, \
                                     kernel, \
                                     mode='same') <0 ).astype('int')
        # Real shore = all borders - shore artifacts
        borders = ((borders - aoi_borders) >0 ).astype('int') * 1.

        return borders

def preprocess_dataset(dataset_uri, aoi_uri, cell_size, output_uri):
    """Function that preprocesses an input dataset (clip,
    reproject, resample) so that it is ready to be used in the model
        
        Inputs:
            -dataset_uri: uri to the input dataset to be pre-processed
            -aoi_uri: uri to an aoi polygon datasource that is used for
                clipping and reprojection.
            -cell_size: output dataset cell size in meters (integer)
            -output_uri: uri to the pre-processed output dataset.
        
        Returns output_uri
    """
    # Split the path apart from the filename
    head, tail = os.path.split(output_uri)
    # Split the file basename from the file extension
    base, ext = os.path.splitext(tail)
    # Adjust the dataset to the aoi and save the result
    adjust_raster_to_aoi(dataset_uri, aoi_uri, cell_size, output_uri)
    
    return output_uri

def preprocess_point_datasource(datasource_uri, aoi_uri, cell_size, \
    output_uri, field_list, nodata=0.):
    """Function that converts a point shapefile to a dataset by clipping,
    reprojecting, resampling, burning, and extrapolating burnt values.
    
        Inputs:
            -datasource_uri: uri to the datasource to be pre-processed
            -aoi_uri: uri to an aoi polygon datasource that is used for
                clipping and reprojection.
            -cell_size: output dataset cell size in meters (integer)
            -output_uri: uri to the pre-processed output dataset.
            -field_name: name of the field in the attribute table to get the
            values from. If a number, use it as a constant. If Null, use 1.
        
        Returns output_uri"""
    # Split the path apart from the filename
    head, tail = os.path.split(output_uri)
    # Split the file basename from the file extension
    base, ext = os.path.splitext(tail)
    # Insert a suffix to the file basename and glue the new path together
    aoi_adjusted_uri = os.path.join(head, base + '_adjusted' + ext)
    # Adjust the shapefile to the aoi and save the result
    adjust_shapefile_to_aoi(datasource_uri, aoi_uri, aoi_adjusted_uri)
    # Burn the field onto a raster
    raster_uri_list = []
    # Get the datasource field
    for field_name in field_list:
        if has_field(field_name, ogr.Open(datasource_uri)):
            # Create unique raster name
            raster_uri_list.append(os.path.join(head, base + '_' + \
            field_name + ext))
            # Create empty raster
            raster_utils.create_raster_from_vector_extents(cell_size, \
            cell_size, gdal.GDT_Float32, nodata, raster_uri_list[-1], \
            ogr.Open(aoi_uri))
            # Vectorize data
            raster_utils.vectorize_points_uri(aoi_adjusted_uri, field_name, \
            raster_uri_list[-1])
        else:
            # field doesn't exist in data
            message = 'field ' + field_name + " doesn't exist in " + \
            datasource_uri
            assert len(raster_uri_list)>0, message

    return raster_uri_list

def preprocess_polygon_datasource(datasource_uri, aoi_uri, cell_size, \
    output_uri, field_name = None, all_touched = False, nodata = 0.):
    """Function that converts a polygon shapefile to a dataset by clipping,
    reprojecting, resampling, burning, and extrapolating burnt values.
    
        Inputs:
            -datasource_uri: uri to the datasource to be pre-processed
            -aoi_uri: uri to an aoi polygon datasource that is used for
                clipping and reprojection.
            -cell_size: output dataset cell size in meters (integer)
            -output_uri: uri to the pre-processed output dataset.
            -field_name: name of the field in the attribute table to get the
            values from. If a number, use it as a constant. If Null, use 1.
        
        Returns output_uri"""
    # Split the path apart from the filename
    head, tail = os.path.split(output_uri)
    # Split the file basename from the file extension
    base, ext = os.path.splitext(tail)
    # Insert a suffix to the file basename and glue the new path together
    aoi_adjusted_uri = os.path.join(head, base + '_aoi_adjusted')
    # Adjust the shapefile to the aoi and save the result
    aoi_adjusted_uri = \
    adjust_shapefile_to_aoi(datasource_uri, aoi_uri, aoi_adjusted_uri)
    # Burn the adjusted file to a raster
    raster_from_shapefile_uri(aoi_adjusted_uri, aoi_uri, cell_size, \
        output_uri, field_name, all_touched, nodata)
    
    return output_uri

def find_attribute_field(field_name, shapefile_uri):
    """Look for a field name in the shapefile attribute table. Search is case
    insensitive."""
    # Look through all the fileds in the attribute table
    shapefile_fields = enumerate_shapefile_fields(shapefile_uri)
    for shapefile_field in shapefile_fields[0]:
        # Do a case-insensitive search
        if shapefile_field.lower() == field_name.lower():
            return shapefile_field
    # If we're here, the field is not in the attribute table, print a useful
    # help message and assert
    LOGGER.debug('available fileds in the shapefile:')
    for shapefile_field in shapefile_fields:
        LOGGER.debug(shapefile_field)
    message = 'File ' + shapefile_uri + " doesn't have field " + field_name
    assert False, message

#:RICH: move this stuff to the 'UI' layer
def preprocess_inputs(args):
    print('---------------------------------------------------------')
    print('args:')
    for item in args.items():
        print(item)
    print('---------------------------------------------------------')
    # Convert anything in unicode to utf-8:
    for key in args.keys():
        if type(args[key]) is unicode:
            args[key] = args[key].encode('utf-8')

    args["uri"] = {}

    prefix = '00_PRE_'
    args['intermediate_directory'] = \
        os.path.join(args['output_base_directory'], 'intermediate')
    args['outputs_directory'] = \
        os.path.join(args['output_base_directory'], 'outputs')
    subdirectory = \
        os.path.join(args['intermediate_directory'], '00_preprocessing')
    sector_range = range(SECTOR_COUNT)
    sectors_deg = np.array(sector_range, dtype=int) *360 / SECTOR_COUNT
    # Create intermediate directories
    if not os.path.isdir(args['intermediate_directory']):
        os.makedirs(args['intermediate_directory'])
    if not os.path.isdir(subdirectory):
        os.makedirs(subdirectory)
    if not os.path.isdir(args['outputs_directory']):
        os.makedirs(args['outputs_directory'])

    # Set to save in 'intermediate_directory'
    save_intermediate = \
    set_save_info(subdirectory, args['aoi_uri'], args['cell_size'])

    args['aoi_raster_uri'] = \
        preprocess_polygon_datasource(args['aoi_uri'], args['aoi_uri'], \
        args['cell_size'], os.path.join(subdirectory, prefix + 'aoi.tif'))

    # Set of input URIs that have been preprocessed
    preprocessed_uris = set()
    # URIs produced from a given input URI, organized as a dictionary where the
    # values are the unprocessed uris, and the keys are the corresponding
    # output uris.
    # output_uris[args['uri']] -> output_uri
    output_uris = {}
    # Do we need an output for this layer?
    if 'structures_uri' in args:
        # Is the input URI already preprocessed?
        if args['structures_uri'] in preprocessed_uris:
            # Yes: pull the output URI from the dictionary output_uris
            args['structures_raster_uri'] = output_uris[args['structures_uri']]
        else:
            # No, compute the output, and save the URI in output_uris
            preprocessed_uris.add(args['structures_uri'])
            print('Pre-processing structures...')
            args['structures_raster_uri'] = \
            preprocess_polygon_datasource(args['structures_uri'], \
            args['aoi_uri'], args['cell_size'], \
            os.path.join(subdirectory, prefix +'structures.tif'))
            output_uris[args['structures_uri']] = args['structures_raster_uri']
    # Do we need an output for this layer?
    if 'landmass_uri' in args:
        # Is the input URI already preprocessed?
        if args['landmass_uri'] in preprocessed_uris:
            # Yes: pull the output URI from the dictionary output_uris
            args['landmass_raster_uri'] = output_uris[args['landmass_uri']]
        else:
            # No, compute the output, and save the URI in output_uris
            preprocessed_uris.add(args['landmass_uri'])
            print('Pre-processing landmass...')
            args['landmass_raster_uri'] = \
            preprocess_polygon_datasource(args['landmass_uri'], \
            args['aoi_uri'], args['cell_size'], \
            os.path.join(subdirectory, prefix + 'landmass.tif'))
            output_uris[args['landmass_uri']] = args['landmass_raster_uri']
    # Can we compute the shore?
    if ('aoi_raster_uri' in args) and ('landmass_raster_uri' in args):
        print('detecting shore...')
        shore_array = \
            detect_shore(args['landmass_raster_uri'], args['aoi_raster_uri'])
        # TODO: Rename this 'shore_raster_uri'
        args['shore_uri'] = \
            save_intermediate(shore_array, prefix + 'shore.tif', no_data = 0.) 
    # Do we need an output for this layer?
    if 'bathymetry_uri' in args:
        # Is the input URI already preprocessed?
        if args['bathymetry_uri'] in preprocessed_uris:
            # Yes: pull the output URI from the dictionary output_uris
            args['bathymetry_raster_uri'] = output_uris[args['bathymetry_uri']]
        else:
            # No, compute the output, and save the URI in output_uris
            preprocessed_uris.add(args['bathymetry_uri'])
            print('Pre-processing bathymetry...')
            args['bathymetry_raster_uri'] = \
            preprocess_dataset(args['bathymetry_uri'], \
            args['aoi_uri'], args['cell_size'], \
            os.path.join(subdirectory, prefix + 'bathymetry.tif'))
            output_uris[args['bathymetry_uri']] = args['bathymetry_raster_uri']
    # Can we compute the fetch?
    if ('landmass_raster_uri' in args) and ('shore_uri'):
        print('computing fetch...')
        bathymetry = gdal.Open(args['bathymetry_raster_uri'])
        array = bathymetry.GetRasterBand(1).ReadAsArray()
        bathymetry_nodata = bathymetry.GetRasterBand(1).GetNoDataValue()
        # TODO: Substitute array and no_data by the file's URI in arguments
        args['fetch_distances'],args['fetch_depths'] = \
             compute_fetch_uri(args['landmass_raster_uri'], \
             args['rays_per_sector'], args['max_fetch'], \
             args['cell_size'], args['shore_uri'], \
             array, bathymetry_nodata)
        array = None
        bathymetry = None
        # The shore segments might have been removed from shore_array. 
        # Store the new shore in the raster.
        args['fetch_distance_uris'] = \
            save_fetch_distances(args['fetch_distances'], args['aoi_uri'], \
            args['cell_size'], subdirectory, prefix)
        args['fetch_depth_uris'] = \
            save_fetch_depths(args['fetch_depths'], args['aoi_uri'], \
            args['cell_size'], subdirectory, prefix)
        print('done.')
    else:
        print('Missing bathymetry, skipping the computation of fetch.')
    # Do we need an output for this layer?
    if 'geomorphology_uri' in args:
        # Is the input URI already preprocessed?
        if args['geomorphology_uri'] in preprocessed_uris:
            # Yes: pull the output URI from the dictionary output_uris
            args['geomorphology_raster_uri'] = \
            output_uris[args['geomorphology_uri']]
        else:
            # No, compute the output, and save the URI in output_uris
            preprocessed_uris.add(args['geomorphology_uri'])
            print('Pre-processing geomorphology...')
            args['geomorphology_raster_uri'] = \
            preprocess_polygon_datasource(args['geomorphology_uri'], \
            args['aoi_uri'], args['cell_size'], \
            os.path.join(subdirectory, prefix + 'geomorphology.tif'), \
            field_name=find_attribute_field('RANK',args['geomorphology_uri']),\
            all_touched = True, nodata = 0.)
            output_uris[args['geomorphology_uri']] = \
            args['geomorphology_raster_uri']
    # Do we need an output for this layer?
    if 'relief_uri' in args:
        # Is the input URI already preprocessed?
        if args['relief_uri'] in preprocessed_uris:
            # Yes: pull the output URI from the dictionary output_uris
            args['relief_raster_uri'] = output_uris[args['relief_uri']]
        else:
            # No, compute the output, and save the URI in output_uris
            preprocessed_uris.add(args['relief_uri'])
            print('Pre-processing relief...')
            args['relief_raster_uri'] = \
            preprocess_polygon_datasource(args['relief_uri'], \
            args['aoi_uri'], args['cell_size'], \
            os.path.join(subdirectory, prefix + 'relief.tif'), \
            field_name = 'RANK', all_touched = True, nodata = 0.)
            output_uris[args['relief_uri']] = args['relief_raster_uri']
    if 'habitats_csv_uri' in args:
        assert os.path.exists(args['habitats_directory_uri']), \
        'Missing directory.'
        # Predefined constants
        NAME                = 0 # Habitat name (string)
        ID                  = 1 # Habitat ID (unique int identifier)
        RANK                = 2 # Habitat rank (int, 1 to 5)
        PROTECTION_DISTANCE = 3 # Habitat protection distance in meters (int)
        FILE_NAME           = 4 # Name of the habitat shapefile
        ATTRIBUTE_COUNT     = 5 # Total number of attributes
        # Dictionary that contains the data's uri indexed by name
        data_uri = {} 
       
        args['habitat_data'] = read_habitat_info(args['habitats_csv_uri'], \
        args['habitats_directory_uri'])

        R = {} # Dictionary: key=segment coord., value=list of fronting habitats
        prefix_number = 1   # used to keep track of file creation order
        # Process each habitat
        for habitat in args['habitat_data']:
            habitat_data = args['habitat_data'][habitat]
            # Check if there is a habitat layer to work with:
            if len(habitat_data) != ATTRIBUTE_COUNT:
                LOGGER.warning( \
                'No shapefile data associated to habitat %s. Skipping.' % \
                habitat_data[NAME])
            else:
                out_uri = os.path.join(subdirectory, \
                prefix + habitat_data[NAME].replace(' ', '_') + '.tif')
                preprocess_polygon_datasource(habitat_data[FILE_NAME], \
                args['aoi_uri'], args['cell_size'], out_uri, \
                all_touched = True, nodata = 0.)
                habitat_data.append(out_uri)
    if ('climatic_forcing_uri' in args) and ('bathymetry_uri' in args) and \
        ('fetch_distances' in args) and ('fetch_depths' in args):
        print('Pre-processing climatic forcing...')
        field_names = enumerate_shapefile_fields(args['climatic_forcing_uri'])
        REI_V_names = []
        REI_PCT_names = []
        WavP_names = []
        WavPPCT_names = []
        for field_name in field_names[0]:
            if re.match('REI_V', field_name):
                REI_V_names.append(field_name)
            elif re.match('REI_PCT', field_name):
                REI_PCT_names.append(field_name)
            elif re.match('WavP_', field_name):
                WavP_names.append(field_name)
            elif re.match('WavPPCT', field_name):
                WavPPCT_names.append(field_name)
        print('Vectorizing data from REI_V...')
        args['REI_V'] = \
        preprocess_point_datasource(args['climatic_forcing_uri'], \
        args['aoi_uri'], args['cell_size'], \
        os.path.join(subdirectory, prefix + 'climatic_forcing.tif'), \
        field_list = REI_V_names, nodata = 0.)
        print('Vectorizing data from REI_PCT...')
        args['REI_PCT'] = \
        preprocess_point_datasource(args['climatic_forcing_uri'], \
        args['aoi_uri'], args['cell_size'], \
        os.path.join(subdirectory, prefix + 'climatic_forcing.tif'), \
        field_list = REI_PCT_names, nodata = 0.)
        print('Vectorizing data from WavP_...')
        args['WavP'] = \
        preprocess_point_datasource(args['climatic_forcing_uri'], \
        args['aoi_uri'], args['cell_size'], \
        os.path.join(subdirectory, prefix + 'climatic_forcing.tif'), \
        field_list = WavP_names, nodata = 0.)
        print('Vectorizing data from WavPPCT...')
        args['WavPPCT'] = \
        preprocess_point_datasource(args['climatic_forcing_uri'], \
        args['aoi_uri'], args['cell_size'], \
        os.path.join(subdirectory, prefix + 'climatic_forcing.tif'), \
        field_list = WavPPCT_names, nodata = 0.)
    if 'continental_shelf_uri' in args:    
        # Is the input URI already preprocessed?
        if args['continental_shelf_uri'] in preprocessed_uris:
            # Yes: pull the output URI from the dictionary output_uris
            args['continental_shelf_raster_uri'] = \
            output_uris[args['continental_shelf_uri']]
        else:
            # No, compute the output, and save the URI in output_uris
            preprocessed_uris.add(args['continental_shelf_uri'])
            print('Pre-processing continental shelf...')
            args['continental_shelf_raster_uri'] = \
            preprocess_polygon_datasource(args['continental_shelf_uri'], \
            args['aoi_uri'], args['cell_size'], \
            os.path.join(subdirectory, prefix + 'continental_shelf.tif'), \
            nodata = 1.)
            output_uris[args['continental_shelf_uri']] = \
            args['continental_shelf_raster_uri']
            # Ideally, we'd want the continental shelf to be filled with 1s, 
            # and the rest with 0s. However, the polygons in the data is not
            # the continental shelf itself, so the 1s are not what we want.
            # But we can flip all 1s to 0s, and all 0s to 1s (logical_not) and
            # we get the contiental shelf that we want, that ends at the right
            # place. We also have another band offshore that is encoded as the
            # continental shelf, but that's not. THis is not a problem, because
            # this portion of 1s is isolated from the real shelf by a band of
            # 0s, which is good enough for the distance measure we need to 
            # compute later on.
            cont_shelf_raster = \
            gdal.Open(args['continental_shelf_raster_uri'], gdal.GA_Update)
            cont_shelf_array = cont_shelf_raster.GetRasterBand(1).ReadAsArray()
            cont_shelf_raster.GetRasterBand(1).WriteArray(np.logical_not( \
            cont_shelf_array).astype(float))
            cont_shelf_raster = None
    if 'sea_level_rise_uri' in args:
        # Is the input URI already preprocessed?
        if args['sea_level_rise_uri'] in preprocessed_uris:
            # Yes: pull the output URI from the dictionary output_uris
            args['sea_level_rise_raster_uri'] = \
            output_uris[args['sea_level_rise_raster_uri']]
        else:
            # No, compute the output, and save the URI in output_uris
            preprocessed_uris.add(args['sea_level_rise_uri'])
            print('Pre-processing sea level rise...')
            field = None
            if has_field('SLR_m', ogr.Open(args['sea_level_rise_uri'])):
                field = 'SLR_m'
            if has_field('rate_mm', ogr.Open(args['sea_level_rise_uri'])):
                field = 'rate_mm'
            # Can't find field, assert after printing a useful error message
            if field is None:
                message = 'Layer ' + args['sea_level_rise_uri'] + \
                " doesn't have the fileds 'SLR_m' or 'rate_mm'"
                LOGGER.error(message)
                fields = enumerate_shapefile_fields(args['sae_level_rise_uri'])
                LOGGER.debug('Available fields: ' + str(len(fields)))
                # Show all ther fields in the shapefile
                for field in fields:
                    LOGGER.debug(field)
            assert field is not None
            args['sea_level_rise_raster_uri'] = \
            preprocess_point_datasource(args['sea_level_rise_uri'],\
            args['aoi_uri'], args['cell_size'], \
            os.path.join(subdirectory, prefix + 'sea_level_rise.tif'), \
            field_list = [field], nodata = 0.)[0]
            output_uris[args['sea_level_rise_uri']] = \
            args['sea_level_rise_raster_uri']
    if 'additional_layer_uri' in args:
        # Is the input URI already preprocessed?
        if args['additional_layer_uri'] in preprocessed_uris:
            # Yes: pull the output URI from the dictionary output_uris
            args['additional_layer_raster_uri'] = \
            output_uris[args['additional_layer_uri']]
        else:
            # No, compute the output, and save the URI in output_uris
            preprocessed_uris.add(args['additional_layer_uri'])
            print('pre-processing additional layer')
            args['additional_layer_raster_uri'] = \
            preprocess_point_datasource(args['additional_layer_uri'],\
            args['aoi_uri'], args['cell_size'], \
            os.path.join(subdirectory, prefix + 'additional_layer.tif'), \
            field_list = [field], nodata = 0.)[0]
            output_uris[args['additional_layer_uri']] = \
            args['additional_layer_raster_uri']
    return

def read_habitat_info(habitats_csv_uri, habitats_directory_uri):
    """Extract the habitats information from the csv file and directory."""
    extension = '.shp'      # Shapefile extension to look for
    ID = 1 # Habitat ID (unique int identifier)
    # Read the CSV file
    csv_reader = csv.reader(open(habitats_csv_uri)) 
    csv_data = {}
    csv_reader.next()
    for item in csv_reader:
        csv_data[item[ID]] = item
    # Retreive shapefiles by extension
    file_list = os.listdir(habitats_directory_uri)
    for entry in file_list:
        # Look for files with '.shp' extension...
        # ...AND '.shp' only: skip extentions like '.shp.xml'
        if extension in entry and \
            (len(entry) == entry.find(extension)+len(extension)):
            # Extract the basename, so that we can find the habitat ID
            basename = entry[0:entry.find(extension)]
            # Find the habitat ID for this file
            habitat_id = basename[basename.find('_')+1:]
            # If it's a known habitat ID, add the file to the habitat data
            if habitat_id in csv_data:
                csv_data[habitat_id].append(
                os.path.join(habitats_directory_uri, entry))
    return csv_data

